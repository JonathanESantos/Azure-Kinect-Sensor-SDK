<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structk4a__calibration__t" kind="struct" language="C++" prot="public">
    <compoundname>k4a_calibration_t</compoundname>
    <derivedcompoundref refid="structk4a_1_1calibration" prot="public" virt="non-virtual">k4a::calibration</derivedcompoundref>
    <includes refid="k4atypes_8h" local="no">k4atypes.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structk4a__calibration__t_1afb9c6f1ed401107b0f65a7fa6a5af910" prot="public" static="no" mutable="no">
        <type><ref refid="structk4a__calibration__camera__t" kindref="compound">k4a_calibration_camera_t</ref></type>
        <definition>k4a_calibration_camera_t k4a_calibration_t::depth_camera_calibration</definition>
        <argsstring></argsstring>
        <name>depth_camera_calibration</name>
        <briefdescription>
<para>Depth camera calibration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" line="1167" column="30" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" bodystart="1167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structk4a__calibration__t_1a3adc45fd59f6c8df46bec9848d70c565" prot="public" static="no" mutable="no">
        <type><ref refid="structk4a__calibration__camera__t" kindref="compound">k4a_calibration_camera_t</ref></type>
        <definition>k4a_calibration_camera_t k4a_calibration_t::color_camera_calibration</definition>
        <argsstring></argsstring>
        <name>color_camera_calibration</name>
        <briefdescription>
<para>Color camera calibration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" line="1169" column="30" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" bodystart="1169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structk4a__calibration__t_a03f4b1600f8088739ffeea818a5df890_1a03f4b1600f8088739ffeea818a5df890" prot="public" static="no" mutable="no">
        <type><ref refid="structk4a__calibration__extrinsics__t" kindref="compound">k4a_calibration_extrinsics_t</ref></type>
        <definition>k4a_calibration_extrinsics_t k4a_calibration_t::extrinsics[K4A_CALIBRATION_TYPE_NUM][K4A_CALIBRATION_TYPE_NUM]</definition>
        <argsstring>[K4A_CALIBRATION_TYPE_NUM][K4A_CALIBRATION_TYPE_NUM]</argsstring>
        <name>extrinsics</name>
        <briefdescription>
<para>Extrinsic transformation parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The extrinsic parameters allow 3D coordinate conversions between depth camera, color camera, the IMU&apos;s gyroscope and accelerometer. To transform from a source to a target 3D coordinate system, use the parameters stored under extrinsics[source][target]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" line="1177" column="34" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" bodystart="1177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structk4a__calibration__t_1a1b206641693220f43836e40b74585028" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t k4a_calibration_t::depth_mode_id</definition>
        <argsstring></argsstring>
        <name>depth_mode_id</name>
        <briefdescription>
<para>Depth camera mode for which calibration was obtained. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" line="1179" column="14" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" bodystart="1179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structk4a__calibration__t_1a1fc290d07999eda51ddbe6765e4a4223" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t k4a_calibration_t::color_mode_id</definition>
        <argsstring></argsstring>
        <name>color_mode_id</name>
        <briefdescription>
<para>Color camera mode for which calibration was obtained. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" line="1180" column="14" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" bodystart="1180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_3d_to_3d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float3_t *source_point3d_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float3_t *target_point3d_mm)</argsstring>
        <name>k4a_calibration_3d_to_3d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>source_point3d_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>target_point3d_mm</declname>
        </param>
        <briefdescription>
<para>Transform a 3D point of a source coordinate system into a 3D point of the target coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 3D coordinates in millimeters representing a point in <computeroutput>source_camera</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output where the new 3D coordinates of the input point in the coordinate space of <computeroutput>target_camera</computeroutput> is stored in millimeters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point3d_mm</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function is used to transform 3D points between depth and color camera coordinate systems. The function uses the extrinsic camera calibration. It computes the output via multiplication with a precomputed matrix encoding a 3D rotation and a 3D translation. If <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> are the same, then <computeroutput>target_point3d_mm</computeroutput> will be identical to <computeroutput>source_point3d_mm</computeroutput>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1756" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1756" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_ga664602bdb48dab38117a6c1d14b880de_1ga664602bdb48dab38117a6c1d14b880de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_2d_to_3d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float2_t *source_point2d, const float source_depth_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float3_t *target_point3d_mm, int *valid)</argsstring>
        <name>k4a_calibration_2d_to_3d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>source_point2d</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>source_depth_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>target_point3d_mm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 2D pixel coordinate with an associated depth value of the source camera into a 3D point of the target coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>source_camera</computeroutput> coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_depth_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of <computeroutput>source_point2d</computeroutput> in millimeters. One way to derive the depth value in the color camera geometry is to use the function <ref refid="group___functions_gafacffb5f781a9c2df30d4a16241cd514_1gafacffb5f781a9c2df30d4a16241cd514" kindref="member">k4a_transformation_depth_image_to_color_camera()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output where the 3D coordinates of the input pixel in the coordinate system of <computeroutput>target_camera</computeroutput> is stored in millimeters.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point2d</computeroutput> is a valid coordinate, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point3d_mm</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point3d_mm</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function applies the intrinsic calibration of <computeroutput>source_camera</computeroutput> to compute the 3D ray from the focal point of the camera through pixel <computeroutput>source_point2d</computeroutput>. The 3D point on this ray is then found using <computeroutput>source_depth_mm</computeroutput>. If <computeroutput>target_camera</computeroutput> is different from <computeroutput>source_camera</computeroutput>, the 3D point is transformed to <computeroutput>target_camera</computeroutput> using <ref refid="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" kindref="member">k4a_calibration_3d_to_3d()</ref>. In practice, <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> will often be identical. In this case, no 3D to 3D transformation is applied.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point2d</computeroutput> is not considered as valid pixel coordinate according to the intrinsic camera model, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point3d_mm</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1817" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1817" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_ga2ed8b51d727425caa942aab190fc2ba9_1ga2ed8b51d727425caa942aab190fc2ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_3d_to_2d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float3_t *source_point3d_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float2_t *target_point2d, int *valid)</argsstring>
        <name>k4a_calibration_3d_to_2d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>source_point3d_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>target_point2d</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 3D point of a source coordinate system into a 2D pixel coordinate of the target camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 3D coordinates in millimeters representing a point in <computeroutput>source_camera</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output where the 2D pixel in <computeroutput>target_camera</computeroutput> coordinates is stored.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point3d_mm</computeroutput> is a valid coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point2d</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point2d</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>target_camera</computeroutput> is different from <computeroutput>source_camera</computeroutput>, <computeroutput>source_point3d_mm</computeroutput> is transformed to <computeroutput>target_camera</computeroutput> using <ref refid="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" kindref="member">k4a_calibration_3d_to_3d()</ref>. In practice, <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> will often be identical. In this case, no 3D to 3D transformation is applied. The 3D point in the coordinate system of <computeroutput>target_camera</computeroutput> is then projected onto the image plane using the intrinsic calibration of <computeroutput>target_camera</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point3d_mm</computeroutput> does not map to a valid 2D coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point2d</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1873" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1873" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_2d_to_2d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float2_t *source_point2d, const float source_depth_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float2_t *target_point2d, int *valid)</argsstring>
        <name>k4a_calibration_2d_to_2d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>source_point2d</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>source_depth_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>target_point2d</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 2D pixel coordinate with an associated depth value of the source camera into a 2D pixel coordinate of the target camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>source_camera</computeroutput> coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_depth_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of <computeroutput>source_point2d</computeroutput> in millimeters. One way to derive the depth value in the color camera geometry is to use the function <ref refid="group___functions_gafacffb5f781a9c2df30d4a16241cd514_1gafacffb5f781a9c2df30d4a16241cd514" kindref="member">k4a_transformation_depth_image_to_color_camera()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>target_camera</computeroutput> coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point2d</computeroutput> is a valid coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point2d</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point2d</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function maps a pixel between the coordinate systems of the depth and color cameras. It is equivalent to calling <ref refid="group___functions_ga664602bdb48dab38117a6c1d14b880de_1ga664602bdb48dab38117a6c1d14b880de" kindref="member">k4a_calibration_2d_to_3d()</ref> to compute the 3D point corresponding to <computeroutput>source_point2d</computeroutput> and then using <ref refid="group___functions_ga2ed8b51d727425caa942aab190fc2ba9_1ga2ed8b51d727425caa942aab190fc2ba9" kindref="member">k4a_calibration_3d_to_2d()</ref> to map the 3D point into the coordinate system of the <computeroutput>target_camera</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> are identical, the function immediately sets <computeroutput>target_point2d</computeroutput> to <computeroutput>source_point2d</computeroutput> and returns without computing any transformations.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point2d</computeroutput> does not map to a valid 2D coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point2d</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1936" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1936" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_ga18bc3138d6cc68af6c49902853fda9b5_1ga18bc3138d6cc68af6c49902853fda9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_color_2d_to_depth_2d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float2_t *source_point2d, const k4a_image_t depth_image, k4a_float2_t *target_point2d, int *valid)</argsstring>
        <name>k4a_calibration_color_2d_to_depth_2d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>source_point2d</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>depth_image</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>target_point2d</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 2D pixel coordinate from color camera into a 2D pixel coordinate of the depth camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>color</computeroutput> camera coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input depth image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>depth</computeroutput> camera coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point2d</computeroutput> is a valid coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point2d</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point2d</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function represents an alternative to <ref refid="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" kindref="member">k4a_calibration_2d_to_2d()</ref> if the number of pixels that need to be transformed is small. This function searches along an epipolar line in the depth image to find the corresponding depth pixel. If a larger number of pixels need to be transformed, it might be computationally cheaper to call <ref refid="group___functions_gafacffb5f781a9c2df30d4a16241cd514_1gafacffb5f781a9c2df30d4a16241cd514" kindref="member">k4a_transformation_depth_image_to_color_camera()</ref> to get correspondence depth values for these color pixels, then call the function <ref refid="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" kindref="member">k4a_calibration_2d_to_2d()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point2d</computeroutput> does not map to a valid 2D coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point2d</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1991" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1991" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_ga853a1a5b6d521bbdf523a69e890c4f10_1ga853a1a5b6d521bbdf523a69e890c4f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structk4a__transformation__t" kindref="compound">k4a_transformation_t</ref></type>
        <definition>k4a_transformation_t k4a_transformation_create</definition>
        <argsstring>(const k4a_calibration_t *calibration)</argsstring>
        <name>k4a_transformation_create</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <briefdescription>
<para>Get handle to transformation handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>A calibration structure obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A transformation handle. A NULL is returned if creation fails.</para>
</simplesect>
<simplesect kind="remark"><para>The transformation handle is used to transform images from the coordinate system of one camera into the other. Each transformation handle requires some pre-computed resources to be allocated, which are retained until the handle is destroyed.</para>
</simplesect>
<simplesect kind="remark"><para>The transformation handle must be destroyed with <ref refid="group___functions_ga7d3ecaae66f26c1a89da9042b1bc6d44_1ga7d3ecaae66f26c1a89da9042b1bc6d44" kindref="member">k4a_transformation_destroy()</ref> when it is no longer to be used.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2023" column="23" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2023" declcolumn="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Calibration type representing device calibration. </para>
    </briefdescription>
    <detaileddescription>
<para> 
<requirements>
  <requirement name="Header">k4atypes.h (include k4a/k4a.h)</requirement>
</requirements>
 </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>k4a::calibration</label>
        <link refid="structk4a_1_1calibration"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>k4a_calibration_t</label>
        <link refid="structk4a__calibration__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>k4a_calibration_intrinsic_parameters_t::_param</label>
        <link refid="structk4a__calibration__intrinsic__parameters__t_1_1__param"/>
      </node>
      <node id="2">
        <label>k4a_calibration_camera_t</label>
        <link refid="structk4a__calibration__camera__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>intrinsics</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>extrinsics</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>k4a_calibration_intrinsics_t</label>
        <link refid="structk4a__calibration__intrinsics__t"/>
        <childnode refid="4" relation="usage">
          <edgelabel>parameters</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>k4a_calibration_extrinsics_t</label>
        <link refid="structk4a__calibration__extrinsics__t"/>
      </node>
      <node id="4">
        <label>k4a_calibration_intrinsic_parameters_t</label>
        <link refid="unionk4a__calibration__intrinsic__parameters__t"/>
        <childnode refid="5" relation="usage">
          <edgelabel>param</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>k4a_calibration_t</label>
        <link refid="structk4a__calibration__t"/>
        <childnode refid="2" relation="usage">
          <edgelabel>color_camera_calibration</edgelabel>
          <edgelabel>depth_camera_calibration</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>extrinsics</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" line="1165" column="1" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4atypes.h" bodystart="1166" bodyend="1181"/>
    <listofallmembers>
      <member refid="structk4a__calibration__t_1a3adc45fd59f6c8df46bec9848d70c565" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>color_camera_calibration</name></member>
      <member refid="structk4a__calibration__t_1a1fc290d07999eda51ddbe6765e4a4223" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>color_mode_id</name></member>
      <member refid="structk4a__calibration__t_1afb9c6f1ed401107b0f65a7fa6a5af910" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>depth_camera_calibration</name></member>
      <member refid="structk4a__calibration__t_1a1b206641693220f43836e40b74585028" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>depth_mode_id</name></member>
      <member refid="structk4a__calibration__t_a03f4b1600f8088739ffeea818a5df890_1a03f4b1600f8088739ffeea818a5df890" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>extrinsics</name></member>
      <member refid="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>k4a_calibration_2d_to_2d</name></member>
      <member refid="group___functions_ga664602bdb48dab38117a6c1d14b880de_1ga664602bdb48dab38117a6c1d14b880de" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>k4a_calibration_2d_to_3d</name></member>
      <member refid="group___functions_ga2ed8b51d727425caa942aab190fc2ba9_1ga2ed8b51d727425caa942aab190fc2ba9" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>k4a_calibration_3d_to_2d</name></member>
      <member refid="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>k4a_calibration_3d_to_3d</name></member>
      <member refid="group___functions_ga18bc3138d6cc68af6c49902853fda9b5_1ga18bc3138d6cc68af6c49902853fda9b5" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>k4a_calibration_color_2d_to_depth_2d</name></member>
      <member refid="group___functions_ga853a1a5b6d521bbdf523a69e890c4f10_1ga853a1a5b6d521bbdf523a69e890c4f10" prot="public" virt="non-virtual"><scope>k4a_calibration_t</scope><name>k4a_transformation_create</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
