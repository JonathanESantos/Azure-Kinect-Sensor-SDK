<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group___functions" kind="group">
    <compoundname>Functions</compoundname>
    <title>Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___functions_1ga77a5f83e56a04136df1398478353193d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_set_debug_message_handler</definition>
        <argsstring>(k4a_logging_message_cb_t *message_cb, void *message_cb_context, k4a_log_level_t min_level)</argsstring>
        <name>k4a_set_debug_message_handler</name>
        <param>
          <type><ref refid="group___prototypes_gab303ae435243b852c36bc1981b96adfe_1gab303ae435243b852c36bc1981b96adfe" kindref="member">k4a_logging_message_cb_t</ref> *</type>
          <declname>message_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>message_cb_context</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_ga84d8f9a665773fb4e75a2ac8160444c6_1ga84d8f9a665773fb4e75a2ac8160444c6" kindref="member">k4a_log_level_t</ref></type>
          <declname>min_level</declname>
        </param>
        <briefdescription>
<para>Sets and clears the callback function to receive debug messages from the Azure Kinect device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to receive messages from. Set to NULL to unregister the callback function.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_cb_context</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback functions context.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The least critical error the user wants to be notified about.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if the callback function was set or cleared successfully. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if an error is encountered or the callback function has already been set. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the operation is not supported.</para>
</simplesect>
<simplesect kind="remark"><para>Call this function to set or clear the callback function that is used to deliver debug messages to the caller. This callback may be called concurrently, it is up to the implementation of the callback function to ensure the parallelization is handled.</para>
</simplesect>
<simplesect kind="remark"><para>Clearing the callback function will block until all pending calls to the callback function have completed.</para>
</simplesect>
<simplesect kind="remark"><para>To update <computeroutput>min_level</computeroutput>, <computeroutput>k4a_set_debug_message_handler</computeroutput> can be called with the same value <computeroutput>message_cb</computeroutput> and by specifying a new <computeroutput>min_level</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>Logging provided via this API is independent of the logging controlled by the environmental variable controls <computeroutput>K4A_ENABLE_LOG_TO_STDOUT</computeroutput>, <computeroutput>K4A_ENABLE_LOG_TO_A_FILE</computeroutput>, and <computeroutput>K4A_LOG_LEVEL</computeroutput>. However there is a slight change in default behavior when using this function. By default, when <computeroutput><ref refid="group___functions_ga77a5f83e56a04136df1398478353193d_1ga77a5f83e56a04136df1398478353193d" kindref="member">k4a_set_debug_message_handler()</ref></computeroutput> has not been used to register a message callback, the default for environmental variable controls is to send debug messages as if K4A_ENABLE_LOG_TO_STDOUT=1 were set. If <computeroutput>k4a_set_debug_message_handler</computeroutput> registers a callback function before <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref> is called, then the default for environmental controls is as if K4A_ENABLE_LOG_TO_STDOUT=0 was specified. Physically specifying the environmental control will override the default.</para>
</simplesect>
<computeroutput>min_level</computeroutput>  
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="96" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="96" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga1d09216c8ee1a878f3e8b6045979adc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_set_allocator</definition>
        <argsstring>(k4a_memory_allocate_cb_t allocate, k4a_memory_destroy_cb_t free)</argsstring>
        <name>k4a_set_allocator</name>
        <param>
          <type><ref refid="group___prototypes_ga5471d7b53e52a1c10569b2f17bb66b5d_1ga5471d7b53e52a1c10569b2f17bb66b5d" kindref="member">k4a_memory_allocate_cb_t</ref></type>
          <declname>allocate</declname>
        </param>
        <param>
          <type><ref refid="group___prototypes_ga1e290c645920c7674c6d36dcbb75909b_1ga1e290c645920c7674c6d36dcbb75909b" kindref="member">k4a_memory_destroy_cb_t</ref></type>
          <declname>free</declname>
        </param>
        <briefdescription>
<para>Sets the callback functions for the SDK allocator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocate</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to allocate memory. When the SDK requires memory allocation this callback will be called and the application can provide a buffer and a context.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to free memory. The SDK will call this function when memory allocated by <computeroutput>allocate</computeroutput> is no longer needed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if the callback function was set or cleared successfully. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if an error is encountered or the callback function has already been set. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the operation is not supported.</para>
</simplesect>
<simplesect kind="remark"><para>Call this function to hook memory allocation by the SDK. Calling with both <computeroutput>allocate</computeroutput> and <computeroutput>free</computeroutput> as NULL will clear the hook and reset to the default allocator.</para>
</simplesect>
<simplesect kind="remark"><para>If this function is called after memory has been allocated, the previous version of <computeroutput>free</computeroutput> function may still be called in the future. The SDK will always call the <computeroutput>free</computeroutput> function that was set at the time that the memory was allocated.</para>
</simplesect>
<simplesect kind="remark"><para>Not all memory allocation by the SDK is performed by this allocate function. Small allocations or allocations from special pools may come from other sources.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="135" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="135" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gac274ccaf0d96578072026ac314893c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_info</definition>
        <argsstring>(k4a_device_t device_handle, k4a_device_info_t *device_info)</argsstring>
        <name>k4a_device_get_info</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type><ref refid="structk4a__device__info__t" kindref="compound">k4a_device_info_t</ref> *</type>
          <declname>device_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the device info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>device</computeroutput> info was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="remark"><para>The device info output contains the vendor id, the device id and available capabilities.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2304" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2304" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga20bf63f7f9a62ec27d6e52ede5d5aa9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_color_mode_count</definition>
        <argsstring>(k4a_device_t device_handle, int *mode_count)</argsstring>
        <name>k4a_device_get_color_mode_count</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the color mode count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>mode</computeroutput> count was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="remark"><para>The mode count output is the number of available color modes for the device specified by device_handle.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2328" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2328" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gae2c7f66152cf2eb2f1e9a207bce64647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_color_mode</definition>
        <argsstring>(k4a_device_t device_handle, int mode_id, k4a_color_mode_info_t *mode_info)</argsstring>
        <name>k4a_device_get_color_mode</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode_id</declname>
        </param>
        <param>
          <type><ref refid="structk4a__color__mode__info__t" kindref="compound">k4a_color_mode_info_t</ref> *</type>
          <declname>mode_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id for color mode info.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the color mode info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>mode</computeroutput> info was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="structk4a__color__mode__info__t" kindref="compound">k4a_color_mode_info_t</ref></para>
</simplesect>
<simplesect kind="remark"><para>The color mode info output contains image resolution, native image format, horizontal and vertical fov and min and max fps.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2357" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2357" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga99493493a9d9cc6e222f9ee764ec7060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_depth_mode_count</definition>
        <argsstring>(k4a_device_t device_handle, int *mode_count)</argsstring>
        <name>k4a_device_get_depth_mode_count</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the depth mode count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>mode</computeroutput> count was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="remark"><para>The mode count output is the number of available depth modes for the device specified by device_handle.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2383" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2383" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga0f6fb0b10b1c18fc934f70759aebbba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_depth_mode</definition>
        <argsstring>(k4a_device_t device_handle, int mode_id, k4a_depth_mode_info_t *mode_info)</argsstring>
        <name>k4a_device_get_depth_mode</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode_id</declname>
        </param>
        <param>
          <type><ref refid="structk4a__depth__mode__info__t" kindref="compound">k4a_depth_mode_info_t</ref> *</type>
          <declname>mode_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id for mode info.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the depth mode info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>mode</computeroutput> info was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="structk4a__depth__mode__info__t" kindref="compound">k4a_depth_mode_info_t</ref></para>
</simplesect>
<simplesect kind="remark"><para>The depth mode info output contains image resolution, image native format, horizontal and vertical fov, min and max fps, min and max range and whether it is passive ir only.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2412" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2412" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga089979035d6b84e18ec792bdcf3bcd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_fps_mode_count</definition>
        <argsstring>(k4a_device_t device_handle, int *mode_count)</argsstring>
        <name>k4a_device_get_fps_mode_count</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the fps mode count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>mode</computeroutput> count was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="remark"><para>The mode count output is the number of available fps modes for the device specified by device_handle.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2438" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2438" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga14956baf6db6ba2e936ae92e0413948a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_fps_mode</definition>
        <argsstring>(k4a_device_t device_handle, int mode_id, k4a_fps_mode_info_t *mode_info)</argsstring>
        <name>k4a_device_get_fps_mode</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode_id</declname>
        </param>
        <param>
          <type><ref refid="structk4a__fps__mode__info__t" kindref="compound">k4a_fps_mode_info_t</ref> *</type>
          <declname>mode_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id for mode info.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the fps mode info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>mode</computeroutput> info was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="structk4a__fps__mode__info__t" kindref="compound">k4a_fps_mode_info_t</ref></para>
</simplesect>
<simplesect kind="remark"><para>The fps mode info contains the frame rate per second.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2467" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2467" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaf7d19df0f73f8e4dfaa21e1b4b719ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t k4a_device_get_installed_count</definition>
        <argsstring>(void)</argsstring>
        <name>k4a_device_get_installed_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of connected devices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of sensors connected to the PC.</para>
</simplesect>
<simplesect kind="remark"><para>This API counts the number of Azure Kinect devices connected to the host PC.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="49" column="11" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="49" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga3d4eb5dfbf4d576d4978b66ea419f113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_open</definition>
        <argsstring>(uint32_t index, k4a_device_t *device_handle)</argsstring>
        <name>k4a_device_open</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref> *</type>
          <declname>device_handle</declname>
        </param>
        <briefdescription>
<para>Open an Azure Kinect device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the device to open, starting with 0. Optionally pass in <ref refid="group___definitions_gaebe4c1071a8ba3b04e32d55c85cae72d_1gaebe4c1071a8ba3b04e32d55c85cae72d" kindref="member">K4A_DEVICE_DEFAULT</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter which on success will return a handle to the device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if the device was opened successfully. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if the device was not opened successfully.</para>
</simplesect>
<simplesect kind="remark"><para>If successful, <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref> will return a device handle in the device_handle parameter. This handle grants exclusive access to the device and may be used in the other Azure Kinect API calls.</para>
</simplesect>
<simplesect kind="remark"><para>When done with the device, close the handle with <ref refid="group___functions_ga7a3931d9a690b3971caaac83b43f9423_1ga7a3931d9a690b3971caaac83b43f9423" kindref="member">k4a_device_close()</ref></para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="165" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="165" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga7a3931d9a690b3971caaac83b43f9423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_device_close</definition>
        <argsstring>(k4a_device_t device_handle)</argsstring>
        <name>k4a_device_close</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <briefdescription>
<para>Closes an Azure Kinect device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Once closed, the handle is no longer valid.</para>
</simplesect>
<simplesect kind="remark"><para>Before closing the handle to the device, ensure that all <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> captures have been released with <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="187" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="187" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga4dac757a33657f4d3dbf1ae8b21c158a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1ga44c7c0c1cfba7c879e9e2da1a869e4ee" kindref="member">k4a_wait_result_t</ref></type>
        <definition>k4a_wait_result_t k4a_device_get_capture</definition>
        <argsstring>(k4a_device_t device_handle, k4a_capture_t *capture_handle, int32_t timeout_in_ms)</argsstring>
        <name>k4a_device_get_capture</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> *</type>
          <declname>capture_handle</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>timeout_in_ms</declname>
        </param>
        <briefdescription>
<para>Reads a sensor capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful this contains a handle to a capture object. Caller must call <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref> when its done using this capture.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_in_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the time in milliseconds the function should block waiting for the capture. If set to 0, the function will return without blocking. Passing a value of <ref refid="group___definitions_gac012768169429fb54ba09f2964775cb9_1gac012768169429fb54ba09f2964775cb9" kindref="member">K4A_WAIT_INFINITE</ref> will block indefinitely until data is available, the device is disconnected, or another error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea77ac95280b54f842a7735bbadc50f6ca" kindref="member">K4A_WAIT_RESULT_SUCCEEDED</ref> if a capture is returned. If a capture is not available before the timeout elapses, the function will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea6bc6ba0069766499f7b791ba42a980c6" kindref="member">K4A_WAIT_RESULT_TIMEOUT</ref>. All other failures will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea956d1d20b14de6ba0a0ed97955e75540" kindref="member">K4A_WAIT_RESULT_FAILED</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>Gets the next capture in the streamed sequence of captures from the camera. If a new capture is not currently available, this function will block until the timeout is reached. The SDK will buffer at least two captures worth of data before dropping the oldest capture. Callers needing to capture all data need to ensure they read the data as fast as the data is being produced on average.</para>
</simplesect>
<simplesect kind="remark"><para>Upon successfully reading a capture this function will return success and populate <computeroutput>capture</computeroutput>. If a capture is not available in the configured <computeroutput>timeout_in_ms</computeroutput>, then the API will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea6bc6ba0069766499f7b791ba42a980c6" kindref="member">K4A_WAIT_RESULT_TIMEOUT</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If the call is successful and a capture is returned, callers must call <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref> to return the allocated memory.</para>
</simplesect>
<simplesect kind="remark"><para>This function needs to be called while the device is in a running state; after <ref refid="group___functions_gaad7a85e1e5471810262442fc4a8e217a_1gaad7a85e1e5471810262442fc4a8e217a" kindref="member">k4a_device_start_cameras()</ref> is called and before <ref refid="group___functions_ga4fa0e0a011a7105309ad97f081a5d6b8_1ga4fa0e0a011a7105309ad97f081a5d6b8" kindref="member">k4a_device_stop_cameras()</ref> is called.</para>
</simplesect>
<simplesect kind="remark"><para>This function returns an error when an internal problem is encountered; such as loss of the USB connection, inability to allocate enough memory, and other unexpected issues. Any error returned by this function signals the end of streaming data, and caller should stop the stream using <ref refid="group___functions_ga4fa0e0a011a7105309ad97f081a5d6b8_1ga4fa0e0a011a7105309ad97f081a5d6b8" kindref="member">k4a_device_stop_cameras()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If this function is waiting for data (non-zero timeout) when <ref refid="group___functions_ga4fa0e0a011a7105309ad97f081a5d6b8_1ga4fa0e0a011a7105309ad97f081a5d6b8" kindref="member">k4a_device_stop_cameras()</ref> or <ref refid="group___functions_ga7a3931d9a690b3971caaac83b43f9423_1ga7a3931d9a690b3971caaac83b43f9423" kindref="member">k4a_device_close()</ref> is called on another thread, this function will return an error.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea77ac95280b54f842a7735bbadc50f6ca" kindref="member">K4A_WAIT_RESULT_SUCCEEDED</ref> if a capture is returned. If a capture is not available before the timeout elapses, the function will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea6bc6ba0069766499f7b791ba42a980c6" kindref="member">K4A_WAIT_RESULT_TIMEOUT</ref>. All other failures will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea956d1d20b14de6ba0a0ed97955e75540" kindref="member">K4A_WAIT_RESULT_FAILED</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="248" column="20" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="248" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga8e5913b3bb94a453c7143bbd6e399a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1ga44c7c0c1cfba7c879e9e2da1a869e4ee" kindref="member">k4a_wait_result_t</ref></type>
        <definition>k4a_wait_result_t k4a_device_get_imu_sample</definition>
        <argsstring>(k4a_device_t device_handle, k4a_imu_sample_t *imu_sample, int32_t timeout_in_ms)</argsstring>
        <name>k4a_device_get_imu_sample</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type><ref refid="structk4a__imu__sample__t" kindref="compound">k4a_imu_sample_t</ref> *</type>
          <declname>imu_sample</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>timeout_in_ms</declname>
        </param>
        <briefdescription>
<para>Reads an IMU sample. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imu_sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location for the API to write the IMU sample.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_in_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the time in milliseconds the function should block waiting for the sample. If set to 0, the function will return without blocking. Passing a value of <ref refid="group___definitions_gac012768169429fb54ba09f2964775cb9_1gac012768169429fb54ba09f2964775cb9" kindref="member">K4A_WAIT_INFINITE</ref> will block indefinitely until data is available, the device is disconnected, or another error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea77ac95280b54f842a7735bbadc50f6ca" kindref="member">K4A_WAIT_RESULT_SUCCEEDED</ref> if a sample is returned. If a sample is not available before the timeout elapses, the function will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea6bc6ba0069766499f7b791ba42a980c6" kindref="member">K4A_WAIT_RESULT_TIMEOUT</ref>. If a device does not support an IMU, then <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eeab95879b0cce3590b7e76255ce6f20a4a" kindref="member">K4A_WAIT_RESULT_UNSUPPORTED</ref> is returned. All other failures will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea956d1d20b14de6ba0a0ed97955e75540" kindref="member">K4A_WAIT_RESULT_FAILED</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>Gets the next sample in the streamed sequence of IMU samples from the device. If a new sample is not currently available, this function will block until the timeout is reached. The API will buffer at least two camera capture intervals worth of samples before dropping the oldest sample. Callers needing to capture all data need to ensure they read the data as fast as the data is being produced on average.</para>
</simplesect>
<simplesect kind="remark"><para>Upon successfully reading a sample this function will return success and populate <computeroutput>imu_sample</computeroutput>. If a sample is not available in the configured <computeroutput>timeout_in_ms</computeroutput>, then the API will return <ref refid="group___enumerations_ga44c7c0c1cfba7c879e9e2da1a869e4ee_1gga44c7c0c1cfba7c879e9e2da1a869e4eea6bc6ba0069766499f7b791ba42a980c6" kindref="member">K4A_WAIT_RESULT_TIMEOUT</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>This function needs to be called while the device is in a running state; after <ref refid="group___functions_gaa855688659a69c0098ce9e0b2ffcc152_1gaa855688659a69c0098ce9e0b2ffcc152" kindref="member">k4a_device_start_imu()</ref> is called and before <ref refid="group___functions_ga731c3ddd0833ce86d31e278992cf3453_1ga731c3ddd0833ce86d31e278992cf3453" kindref="member">k4a_device_stop_imu()</ref> is called.</para>
</simplesect>
<simplesect kind="remark"><para>This function returns an error when an internal problem is encountered; such as loss of the USB connection, inability to allocate enough memory, and other unexpected issues. Any error returned by this function signals the end of streaming data, and caller should stop the stream using <ref refid="group___functions_ga731c3ddd0833ce86d31e278992cf3453_1ga731c3ddd0833ce86d31e278992cf3453" kindref="member">k4a_device_stop_imu()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If this function is waiting for data (non-zero timeout) when <ref refid="group___functions_ga731c3ddd0833ce86d31e278992cf3453_1ga731c3ddd0833ce86d31e278992cf3453" kindref="member">k4a_device_stop_imu()</ref> or <ref refid="group___functions_ga7a3931d9a690b3971caaac83b43f9423_1ga7a3931d9a690b3971caaac83b43f9423" kindref="member">k4a_device_close()</ref> is called on another thread, this function will return an error.</para>
</simplesect>
<simplesect kind="remark"><para>The memory the IMU sample is written to is allocated and owned by the caller, so there is no need to call an Azure Kinect API to free or release the sample.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="307" column="20" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="307" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaffbf32b4d014c31826d52de1c0c932cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_capture_create</definition>
        <argsstring>(k4a_capture_t *capture_handle)</argsstring>
        <name>k4a_capture_create</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> *</type>
          <declname>capture_handle</declname>
        </param>
        <briefdescription>
<para>Create an empty capture object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a location to store the handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Call this function to create a <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> handle for a new capture. Release it with <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref>.</para>
</simplesect>
The new capture is created with a reference count of 1.</para>
<para><simplesect kind="return"><para>Returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> on success. Errors are indicated with <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> and error specific data can be found in the log.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="335" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="335" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_capture_release</definition>
        <argsstring>(k4a_capture_t capture_handle)</argsstring>
        <name>k4a_capture_release</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <briefdescription>
<para>Release a capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture to release.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Call this function when finished using the capture.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="355" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="355" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gab15293d2e452470fff8d5109472c7350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_capture_reference</definition>
        <argsstring>(k4a_capture_t capture_handle)</argsstring>
        <name>k4a_capture_reference</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <briefdescription>
<para>Add a reference to a capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture to add a reference to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Call this function to add an additional reference to a capture. This reference must be removed with <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="376" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="376" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga683e440b5f22215a2de58d7fa140488c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
        <definition>k4a_image_t k4a_capture_get_color_image</definition>
        <argsstring>(k4a_capture_t capture_handle)</argsstring>
        <name>k4a_capture_get_color_image</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <briefdescription>
<para>Get the color image associated with the given capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle containing the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Call this function to access the color image part of this capture. Release the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> with <ref refid="group___functions_ga27c81863b13fafc3934a32935a014e9f_1ga27c81863b13fafc3934a32935a014e9f" kindref="member">k4a_image_release()</ref>;</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="397" column="14" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="397" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gafa03513da96bf6b8c254fc11a04ee6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
        <definition>k4a_image_t k4a_capture_get_depth_image</definition>
        <argsstring>(k4a_capture_t capture_handle)</argsstring>
        <name>k4a_capture_get_depth_image</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <briefdescription>
<para>Get the depth image associated with the given capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle containing the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Call this function to access the depth image part of this capture. Release the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> with <ref refid="group___functions_ga27c81863b13fafc3934a32935a014e9f_1ga27c81863b13fafc3934a32935a014e9f" kindref="member">k4a_image_release()</ref>;</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="418" column="14" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="418" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga1531c3fa76a7c174b8f2eab24de91794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
        <definition>k4a_image_t k4a_capture_get_ir_image</definition>
        <argsstring>(k4a_capture_t capture_handle)</argsstring>
        <name>k4a_capture_get_ir_image</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <briefdescription>
<para>Get the IR image associated with the given capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle containing the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Call this function to access the IR image part of this capture. Release the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> with <ref refid="group___functions_ga27c81863b13fafc3934a32935a014e9f_1ga27c81863b13fafc3934a32935a014e9f" kindref="member">k4a_image_release()</ref>;</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="439" column="14" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="439" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga28824350a175d8eeba7c7a7d2753c2cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_capture_set_color_image</definition>
        <argsstring>(k4a_capture_t capture_handle, k4a_image_t image_handle)</argsstring>
        <name>k4a_capture_set_color_image</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Set or add a color image to the associated capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle to hold the image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Image handle containing the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> is added to a <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref>, the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> will automatically add a reference to the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If there is already a color image contained in the capture, the existing image will be dereferenced and replaced with the new image.</para>
</simplesect>
<simplesect kind="remark"><para>To remove a color image to the capture without adding a new image, this function can be called with a NULL image_handle.</para>
</simplesect>
<simplesect kind="remark"><para>Any <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> contained in this <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> will automatically be dereferenced when all references to the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> are released with <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="475" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="475" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gad28b520b45096dd430d2a14b6052ebae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_capture_set_depth_image</definition>
        <argsstring>(k4a_capture_t capture_handle, k4a_image_t image_handle)</argsstring>
        <name>k4a_capture_set_depth_image</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Set or add a depth image to the associated capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle to hold the image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Image handle containing the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> is added to a <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref>, the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> will automatically add a reference to the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If there is already an image depth image contained in the capture, the existing image will be dereferenced and replaced with the new image.</para>
</simplesect>
<simplesect kind="remark"><para>To remove a depth image to the capture without adding a new image, this function can be called with a NULL image_handle.</para>
</simplesect>
<simplesect kind="remark"><para>Any <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> contained in this <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> will automatically be dereferenced when all references to the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> are released with <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="511" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="511" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga473abb7de733bf5f53329f3b1a86594c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_capture_set_ir_image</definition>
        <argsstring>(k4a_capture_t capture_handle, k4a_image_t image_handle)</argsstring>
        <name>k4a_capture_set_ir_image</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Set or add an IR image to the associated capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle to hold the image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Image handle containing the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> is added to a <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref>, the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> will automatically add a reference to the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If there is already an IR image contained in the capture, the existing image will be dereferenced and replaced with the new image.</para>
</simplesect>
<simplesect kind="remark"><para>To remove a IR image to the capture without adding a new image, this function can be called with a NULL image_handle.</para>
</simplesect>
<simplesect kind="remark"><para>Any <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> contained in this <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> will automatically be dereferenced when all references to the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> are released with <ref refid="group___functions_ga0ed6f74ec403c3eac1b8ef3afb32cee6_1ga0ed6f74ec403c3eac1b8ef3afb32cee6" kindref="member">k4a_capture_release()</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="546" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="546" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga262b1df45e7b33dd4ea95e81d52a3a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_capture_set_temperature_c</definition>
        <argsstring>(k4a_capture_t capture_handle, float temperature_c)</argsstring>
        <name>k4a_capture_set_temperature_c</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>temperature_c</declname>
        </param>
        <briefdescription>
<para>Set the temperature associated with the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle to set the temperature on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature_c</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in Celsius to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="566" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="566" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gacc45836ed4a9cd055c37f51ffca4f992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float k4a_capture_get_temperature_c</definition>
        <argsstring>(k4a_capture_t capture_handle)</argsstring>
        <name>k4a_capture_get_temperature_c</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>capture_handle</declname>
        </param>
        <briefdescription>
<para>Get the temperature associated with the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capture_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture handle to retrieve the temperature from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns the temperature of the device at the time of the capture in Celsius. If the temperature is unavailable, the function will return NAN.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="587" column="8" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="587" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga859554581bb97a620ff8e92a893e71ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_image_create</definition>
        <argsstring>(k4a_image_format_t format, int width_pixels, int height_pixels, int stride_bytes, k4a_image_t *image_handle)</argsstring>
        <name>k4a_image_create</name>
        <param>
          <type><ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1gabd9688eb20d5cb878fd22d36de882ddb" kindref="member">k4a_image_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width_pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height_pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_bytes</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> *</type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Create an image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the image that will be stored in this image container.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width_pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>Width in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height_pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>Height in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes per horizontal line of the image. If set to 0, the stride will be set to the minimum size given the <computeroutput>format</computeroutput> and <computeroutput>width_pixels</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store image handle in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is used to create images of formats that have consistent stride. The function is not suitable for compressed formats that may not be represented by the same number of bytes per line.</para>
</simplesect>
<simplesect kind="remark"><para>For most image formats, the function will allocate an image buffer of size <computeroutput>height_pixels</computeroutput> * <computeroutput>stride_bytes</computeroutput>. Buffers <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddbaf334f6c32b6b44d1f5df02a349f05288" kindref="member">K4A_IMAGE_FORMAT_COLOR_NV12</ref> format will allocate an additional <computeroutput>height_pixels</computeroutput> / 2 set of lines (each of <computeroutput>stride_bytes</computeroutput>). This function cannot be used to allocate <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddbaae172e7eecc6f4adfc318c789e49aaf9" kindref="member">K4A_IMAGE_FORMAT_COLOR_MJPG</ref> buffers.</para>
</simplesect>
<simplesect kind="remark"><para>To create an image object without the API allocating memory, or to represent an image that has a non-deterministic stride, use <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>The <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> is created with a reference count of 1.</para>
</simplesect>
<simplesect kind="remark"><para>When finished using the created image, release it with k4a_image_release.</para>
</simplesect>
<simplesect kind="return"><para>Returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> on success. Errors are indicated with <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="639" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="639" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaf84f2a271bcf6afae429bbccd47071b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_image_create_from_buffer</definition>
        <argsstring>(k4a_image_format_t format, int width_pixels, int height_pixels, int stride_bytes, uint8_t *buffer, size_t buffer_size, k4a_memory_destroy_cb_t *buffer_release_cb, void *buffer_release_cb_context, k4a_image_t *image_handle)</argsstring>
        <name>k4a_image_create_from_buffer</name>
        <param>
          <type><ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1gabd9688eb20d5cb878fd22d36de882ddb" kindref="member">k4a_image_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width_pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height_pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_bytes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type><ref refid="group___prototypes_ga1e290c645920c7674c6d36dcbb75909b_1ga1e290c645920c7674c6d36dcbb75909b" kindref="member">k4a_memory_destroy_cb_t</ref> *</type>
          <declname>buffer_release_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer_release_cb_context</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> *</type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Create an image from a pre-allocated buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the image that will be stored in this image container.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width_pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>Width in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height_pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>Height in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes per horizontal line of the image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated image buffer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the pre-allocated image buffer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_release_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to the buffer free function, called when all references to the buffer have been released. This parameter is optional.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_release_cb_context</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the buffer free function. This value will be called as a parameter to <computeroutput>buffer_release_cb</computeroutput> when the callback is invoked.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store image handle in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function creates a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> from a pre-allocated buffer. When all references to this object reach zero the provided <computeroutput>buffer_release_cb</computeroutput> callback function is called so that the memory can be released. If this function fails, the API will not use the memory provided in <computeroutput>buffer</computeroutput>, and the API will not call <computeroutput>buffer_release_cb</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>The <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> is created with a reference count of 1.</para>
</simplesect>
<simplesect kind="remark"><para>Release the reference on this function with <ref refid="group___functions_ga27c81863b13fafc3934a32935a014e9f_1ga27c81863b13fafc3934a32935a014e9f" kindref="member">k4a_image_release()</ref>.</para>
</simplesect>
<simplesect kind="return"><para>Returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> on success. Errors are indicated with <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> and error specific data can be found in the log.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="701" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="701" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga2ef070cf4e543cd0f726478af332546e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * k4a_image_get_buffer</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_buffer</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this buffer to access the raw image data.</para>
</simplesect>
<simplesect kind="return"><para>The function will return NULL if there is an error, and will normally return a pointer to the image buffer. Since all <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> instances are created with an image buffer, this function should only return NULL if the <computeroutput>image_handle</computeroutput> is invalid.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="734" column="10" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="734" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga814fd12783faf624e9357bbb3655643b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t k4a_image_get_size</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_size</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image buffer size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function to know what the size of the image buffer is returned by <ref refid="group___functions_ga2ef070cf4e543cd0f726478af332546e_1ga2ef070cf4e543cd0f726478af332546e" kindref="member">k4a_image_get_buffer()</ref>.</para>
</simplesect>
<simplesect kind="return"><para>The function will return 0 if there is an error, and will normally return the image size. Since all <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref> instances are created with an image buffer, this function should only return 0 if the <computeroutput>image_handle</computeroutput> is invalid.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="759" column="9" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="759" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga16f663cb93d8a8fa059fd551485f1315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1gabd9688eb20d5cb878fd22d36de882ddb" kindref="member">k4a_image_format_t</ref></type>
        <definition>k4a_image_format_t k4a_image_get_format</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_format</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the format of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function to determine the format of the image buffer.</para>
</simplesect>
<simplesect kind="return"><para>This function is not expected to fail, all <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>&apos;s are created with a known format. If the <computeroutput>image_handle</computeroutput> is invalid, the function will return <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba10833e30171730f43eeff1dc8d7b0a52" kindref="member">K4A_IMAGE_FORMAT_CUSTOM</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="783" column="21" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="783" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gab3df35a307588f272665328711342c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k4a_image_get_width_pixels</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_width_pixels</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image width in pixels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function is not expected to fail, all <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>&apos;s are created with a known width. If the <computeroutput>image_handle</computeroutput> is invalid, the function will return 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="804" column="6" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="804" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga57ef7c5ce58812e176537476e4eb1764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k4a_image_get_height_pixels</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_height_pixels</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image height in pixels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function is not expected to fail, all <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>&apos;s are created with a known height. If the <computeroutput>image_handle</computeroutput> is invalid, the function will return 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="825" column="6" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="825" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga18fa129b72b89ce8d13cd3e650af88e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k4a_image_get_stride_bytes</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_stride_bytes</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image stride in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function is not expected to fail, all <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>&apos;s are created with a known stride. If the <computeroutput>image_handle</computeroutput> is invalid, or the image&apos;s format does not have a stride, the function will return 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="846" column="6" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="846" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga5a0940fb8ecf418eb3a388412bd08643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>K4A_DEPRECATED_EXPORT uint64_t</type>
        <definition>K4A_DEPRECATED_EXPORT uint64_t k4a_image_get_timestamp_usec</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_timestamp_usec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image&apos;s device timestamp in microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Returns the device timestamp of the image. Timestamps are recorded by the device and represent the mid-point of exposure. They may be used for relative comparison, but their absolute value has no defined meaning.</para>
</simplesect>
<simplesect kind="return"><para>If the <computeroutput>image_handle</computeroutput> is invalid or if no timestamp was set for the image, this function will return 0. It is also possible for 0 to be a valid timestamp originating from the beginning of a recording or the start of streaming.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated starting in 1.2.0. Please use <ref refid="group___functions_ga318e115976ac441b513f6cf3c102a655_1ga318e115976ac441b513f6cf3c102a655" kindref="member">k4a_image_get_device_timestamp_usec()</ref>.</para>
</xrefdescription></xrefsect></para>
<para> 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="875" column="32" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="875" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga318e115976ac441b513f6cf3c102a655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t k4a_image_get_device_timestamp_usec</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_device_timestamp_usec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image&apos;s device timestamp in microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Returns the device timestamp of the image, as captured by the hardware. Timestamps are recorded by the device and represent the mid-point of exposure. They may be used for relative comparison, but their absolute value has no defined meaning.</para>
</simplesect>
<simplesect kind="return"><para>If the <computeroutput>image_handle</computeroutput> is invalid or if no timestamp was set for the image, this function will return 0. It is also possible for 0 to be a valid timestamp originating from the beginning of a recording or the start of streaming.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="901" column="11" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="901" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga98ba229d1ee1cf3b7c27a0f95e14826b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t k4a_image_get_system_timestamp_nsec</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_system_timestamp_nsec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image&apos;s system timestamp in nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Returns the system timestamp of the image. Timestamps are recorded by the host. They may be used for relative comparision, as they are relative to the corresponding system clock. The absolute value is a monotonic count from an arbitrary point in the past.</para>
</simplesect>
<simplesect kind="remark"><para>The system timestamp is captured at the moment host PC finishes receiving the image.</para>
</simplesect>
<simplesect kind="remark"><para>On Linux the system timestamp is read from clock_gettime(CLOCK_MONOTONIC), which measures realtime and is not impacted by adjustments to the system clock. It starts from an arbitrary point in the past. On Windows the system timestamp is read from QueryPerformanceCounter(), it also measures realtime and is not impacted by adjustments to the system clock. It also starts from an arbitrary point in the past.</para>
</simplesect>
<simplesect kind="return"><para>If the <computeroutput>image_handle</computeroutput> is invalid or if no timestamp was set for the image, this function will return 0. It is also possible for 0 to be a valid timestamp originating from the beginning of a recording or the start of streaming.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="936" column="11" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="936" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga54568ebab477f2534b3c4c92688344d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t k4a_image_get_exposure_usec</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_exposure_usec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image exposure in microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Returns an exposure time in microseconds. This is only supported on color image formats.</para>
</simplesect>
<simplesect kind="return"><para>If the <computeroutput>image_handle</computeroutput> is invalid, or no exposure was set on the image, the function will return 0. Otherwise, it will return the image exposure time in microseconds.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="960" column="11" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="960" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga5075f97b2de6cb0fee1725d5e9250879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t k4a_image_get_white_balance</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_white_balance</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image white balance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Returns the image&apos;s white balance. This function is only valid for color captures, and not for depth or IR captures.</para>
</simplesect>
<simplesect kind="return"><para>Returns the image white balance in Kelvin. If <computeroutput>image_handle</computeroutput> is invalid, or the white balance was not set or not applicable to the image, the function will return 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="984" column="11" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="984" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga3626cef655d79190d2e002c3c4030872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t k4a_image_get_iso_speed</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_get_iso_speed</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Get the image ISO speed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is only valid for color captures, and not for depth or IR captures.</para>
</simplesect>
<simplesect kind="return"><para>Returns the ISO speed of the image. 0 indicates the ISO speed was not available or an error occurred.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1007" column="11" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1007" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gacc2c4bf42956687a101937b77f8dfa21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_image_set_device_timestamp_usec</definition>
        <argsstring>(k4a_image_t image_handle, uint64_t timestamp_usec)</argsstring>
        <name>k4a_image_set_device_timestamp_usec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timestamp_usec</declname>
        </param>
        <briefdescription>
<para>Set the device time stamp, in microseconds, of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image to set the timestamp on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>Device timestamp of the image in microseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function in conjunction with <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref> to construct a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>The device timestamp represents the mid-point of exposure of the image, as captured by the hardware.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1034" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1034" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga276298132ac76f56bf2c8b7589e38d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>K4A_DEPRECATED_EXPORT void</type>
        <definition>K4A_DEPRECATED_EXPORT void k4a_image_set_timestamp_usec</definition>
        <argsstring>(k4a_image_t image_handle, uint64_t timestamp_usec)</argsstring>
        <name>k4a_image_set_timestamp_usec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timestamp_usec</declname>
        </param>
        <briefdescription>
<para>Set the device time stamp, in microseconds, of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image to set the timestamp on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>Device timestamp of the image in microseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function in conjunction with <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref> to construct a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>The device timestamp represents the mid-point of exposure of the image, as captured by the hardware.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated starting in 1.2.0. Please use <ref refid="group___functions_gacc2c4bf42956687a101937b77f8dfa21_1gacc2c4bf42956687a101937b77f8dfa21" kindref="member">k4a_image_set_device_timestamp_usec()</ref>.</para>
</xrefdescription></xrefsect></para>
<para> 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1064" column="28" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1064" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaf18827997835a77ac041d5a87203e5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_image_set_system_timestamp_nsec</definition>
        <argsstring>(k4a_image_t image_handle, uint64_t timestamp_nsec)</argsstring>
        <name>k4a_image_set_system_timestamp_nsec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timestamp_nsec</declname>
        </param>
        <briefdescription>
<para>Set the system time stamp, in nanoseconds, of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image to set the timestamp on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp_nsec</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp of the image in nanoseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function in conjunction with <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref> to construct a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>The system timestamp is a high performance and increasing clock (from boot). The timestamp represents the time immediately after the image buffer was read by the host PC.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1092" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1092" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga617dac1d4664f8f4ead3013c1739ebb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_image_set_exposure_usec</definition>
        <argsstring>(k4a_image_t image_handle, uint64_t exposure_usec)</argsstring>
        <name>k4a_image_set_exposure_usec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exposure_usec</declname>
        </param>
        <briefdescription>
<para>Set the exposure time, in microseconds, of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image to set the exposure time on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exposure_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>Exposure time of the image in microseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function in conjunction with <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref> to construct a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>. An exposure time of 0 is considered invalid. Only color image formats are expected to have a valid exposure time.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1117" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1117" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga29954cc87d1fabc8651155f7baff5c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>K4A_DEPRECATED_EXPORT void</type>
        <definition>K4A_DEPRECATED_EXPORT void k4a_image_set_exposure_time_usec</definition>
        <argsstring>(k4a_image_t image_handle, uint64_t exposure_usec)</argsstring>
        <name>k4a_image_set_exposure_time_usec</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>exposure_usec</declname>
        </param>
        <briefdescription>
<para>Set the exposure time, in microseconds, of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image to set the exposure time on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exposure_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>Exposure time of the image in microseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function in conjunction with <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref> to construct a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>. An exposure time of 0 is considered invalid. Only color image formats are expected to have a valid exposure time.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated starting in 1.2.0. Please use <ref refid="group___functions_ga617dac1d4664f8f4ead3013c1739ebb0_1ga617dac1d4664f8f4ead3013c1739ebb0" kindref="member">k4a_image_set_exposure_usec()</ref>.</para>
</xrefdescription></xrefsect></para>
<para> 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1145" column="28" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1145" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gad8c0bbccfd5086a7330bf897ae82561b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_image_set_white_balance</definition>
        <argsstring>(k4a_image_t image_handle, uint32_t white_balance)</argsstring>
        <name>k4a_image_set_white_balance</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>white_balance</declname>
        </param>
        <briefdescription>
<para>Set the white balance of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image to set the white balance on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>white_balance</parametername>
</parameternamelist>
<parameterdescription>
<para>White balance of the image in degrees Kelvin.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function in conjunction with <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref> to construct a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>. A white balance of 0 is considered invalid. White balance is only meaningful for color images, and not expected on depth or IR images.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1170" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1170" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga5a64f64515ff4dff317fec92a8427f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_image_set_iso_speed</definition>
        <argsstring>(k4a_image_t image_handle, uint32_t iso_speed)</argsstring>
        <name>k4a_image_set_iso_speed</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>iso_speed</declname>
        </param>
        <briefdescription>
<para>Set the ISO speed of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image to set the ISO speed on.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iso_speed</parametername>
</parameternamelist>
<parameterdescription>
<para>ISO speed of the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use this function in conjunction with <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref> to construct a <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>. An ISO speed of 0 is considered invalid. Only color images are expected to have a valid ISO speed.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1194" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1194" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gae211d6b97d4ce1c752e8db9d5ea5b8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_image_reference</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_reference</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Add a reference to the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>References manage the lifetime of the object. When the references reach zero the object is destroyed. A caller must not access the object after its reference is released.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1215" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1215" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga27c81863b13fafc3934a32935a014e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_image_release</definition>
        <argsstring>(k4a_image_t image_handle)</argsstring>
        <name>k4a_image_release</name>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>image_handle</declname>
        </param>
        <briefdescription>
<para>Remove a reference from the <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the image for which the get operation is performed on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>References manage the lifetime of the object. When the references reach zero the object is destroyed. A caller must not access the object after its reference is released.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1236" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1236" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaad7a85e1e5471810262442fc4a8e217a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_start_cameras</definition>
        <argsstring>(k4a_device_t device_handle, const k4a_device_configuration_t *config)</argsstring>
        <name>k4a_device_start_cameras</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__device__configuration__t" kindref="compound">k4a_device_configuration_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Starts color and depth camera capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration we want to run the device in. This can be initialized with <ref refid="group___definitions_ga4f693ace52a6eeec10cc6ca0350d6601_1ga4f693ace52a6eeec10cc6ca0350d6601" kindref="member">K4A_DEVICE_CONFIG_INIT_DISABLE_ALL</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> is returned on success.</para>
</simplesect>
<simplesect kind="remark"><para>Individual sensors configured to run will now start to stream captured data.</para>
</simplesect>
<simplesect kind="remark"><para>It is not valid to call <ref refid="group___functions_gaad7a85e1e5471810262442fc4a8e217a_1gaad7a85e1e5471810262442fc4a8e217a" kindref="member">k4a_device_start_cameras()</ref> a second time on the same <ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref> until <ref refid="group___functions_ga4fa0e0a011a7105309ad97f081a5d6b8_1ga4fa0e0a011a7105309ad97f081a5d6b8" kindref="member">k4a_device_stop_cameras()</ref> has been called.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1266" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1266" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga4fa0e0a011a7105309ad97f081a5d6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_device_stop_cameras</definition>
        <argsstring>(k4a_device_t device_handle)</argsstring>
        <name>k4a_device_stop_cameras</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <briefdescription>
<para>Stops the color and depth camera capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The streaming of individual sensors stops as a result of this call. Once called, <ref refid="group___functions_gaad7a85e1e5471810262442fc4a8e217a_1gaad7a85e1e5471810262442fc4a8e217a" kindref="member">k4a_device_start_cameras()</ref> may be called again to resume sensor streaming.</para>
</simplesect>
<simplesect kind="remark"><para>This function may be called while another thread is blocking in <ref refid="group___functions_ga4dac757a33657f4d3dbf1ae8b21c158a_1ga4dac757a33657f4d3dbf1ae8b21c158a" kindref="member">k4a_device_get_capture()</ref>. Calling this function while another thread is in that function will result in that function returning a failure.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1291" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1291" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaa855688659a69c0098ce9e0b2ffcc152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_start_imu</definition>
        <argsstring>(k4a_device_t device_handle)</argsstring>
        <name>k4a_device_start_imu</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <briefdescription>
<para>Starts the IMU sample stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> is returned on success. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if the sensor is already running or a failure is encountered. If a device does not support an IMU, <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> is returned.</para>
</simplesect>
<simplesect kind="remark"><para>Call this API to start streaming IMU data. It is not valid to call this function a second time on the same <ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref> until <ref refid="group___functions_ga731c3ddd0833ce86d31e278992cf3453_1ga731c3ddd0833ce86d31e278992cf3453" kindref="member">k4a_device_stop_imu()</ref> has been called.</para>
</simplesect>
<simplesect kind="remark"><para>This function is dependent on the state of the cameras. The color or depth camera must be started before the IMU. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> will be returned if one of the cameras is not running.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1320" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1320" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga731c3ddd0833ce86d31e278992cf3453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_device_stop_imu</definition>
        <argsstring>(k4a_device_t device_handle)</argsstring>
        <name>k4a_device_stop_imu</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <briefdescription>
<para>Stops the IMU capture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The streaming of the IMU stops as a result of this call. Once called, <ref refid="group___functions_gaa855688659a69c0098ce9e0b2ffcc152_1gaa855688659a69c0098ce9e0b2ffcc152" kindref="member">k4a_device_start_imu()</ref> may be called again to resume sensor streaming, so long as the cameras are running.</para>
</simplesect>
<simplesect kind="remark"><para>This function may be called while another thread is blocking in <ref refid="group___functions_ga8e5913b3bb94a453c7143bbd6e399a0e_1ga8e5913b3bb94a453c7143bbd6e399a0e" kindref="member">k4a_device_get_imu_sample()</ref>. Calling this function while another thread is in that function will result in that function returning a failure.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1345" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1345" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga798489af207ff1c99f2285ff6b08bc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1ga71b3cf304a2cd8fbac2f86c876deda5c" kindref="member">k4a_buffer_result_t</ref></type>
        <definition>k4a_buffer_result_t k4a_device_get_serialnum</definition>
        <argsstring>(k4a_device_t device_handle, char *serial_number, size_t *serial_number_size)</argsstring>
        <name>k4a_device_get_serialnum</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>serial_number</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>serial_number_size</declname>
        </param>
        <briefdescription>
<para>Get the Azure Kinect device serial number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the serial number to. If the function returns <ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1gga71b3cf304a2cd8fbac2f86c876deda5cab28733ec2d34368fbc91a2ee25545fc3" kindref="member">K4A_BUFFER_RESULT_SUCCEEDED</ref>, this will be a NULL terminated string of ASCII characters. If this input is NULL <computeroutput>serial_number_size</computeroutput> will still be updated to return the size of the buffer needed to store the string.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial_number_size</parametername>
</parameternamelist>
<parameterdescription>
<para>On input, the size of the <computeroutput>serial_number</computeroutput> buffer if that pointer is not NULL. On output, this value is set to the actual number of bytes in the serial number (including the null terminator).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A return of <ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1gga71b3cf304a2cd8fbac2f86c876deda5cab28733ec2d34368fbc91a2ee25545fc3" kindref="member">K4A_BUFFER_RESULT_SUCCEEDED</ref> means that the <computeroutput>serial_number</computeroutput> has been filled in. If the buffer is too small the function returns <ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1gga71b3cf304a2cd8fbac2f86c876deda5ca37df229f19ce567914a8b8d15fc50248" kindref="member">K4A_BUFFER_RESULT_TOO_SMALL</ref> and the size of the serial number is returned in the <computeroutput>serial_number_size</computeroutput> parameter. All other failures return <ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1gga71b3cf304a2cd8fbac2f86c876deda5ca29305af05427c7e739e910f02f72709a" kindref="member">K4A_BUFFER_RESULT_FAILED</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>Queries the device for its serial number. If the caller needs to know the size of the serial number to allocate memory, the function should be called once with a NULL <computeroutput>serial_number</computeroutput> to get the needed size in the <computeroutput>serial_number_size</computeroutput> output, and then again with the allocated buffer.</para>
</simplesect>
<simplesect kind="remark"><para>Only a complete serial number will be returned. If the caller&apos;s buffer is too small, the function will return <ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1gga71b3cf304a2cd8fbac2f86c876deda5ca37df229f19ce567914a8b8d15fc50248" kindref="member">K4A_BUFFER_RESULT_TOO_SMALL</ref> without returning any data in <computeroutput>serial_number</computeroutput>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1385" column="22" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1385" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaea1def0a70bfa64ba275534be945669e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_version</definition>
        <argsstring>(k4a_device_t device_handle, k4a_hardware_version_t *version)</argsstring>
        <name>k4a_device_get_version</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type><ref refid="structk4a__hardware__version__t" kindref="compound">k4a_hardware_version_t</ref> *</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Get the version numbers of the device&apos;s subsystems. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the version info to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A return of <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> means that the version structure has been filled in. All other failures return <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1410" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1410" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga70968e31e13aed0e2bef2009f169b901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_color_control_capabilities</definition>
        <argsstring>(k4a_device_t device_handle, k4a_color_control_command_t command, bool *supports_auto, int32_t *min_value, int32_t *max_value, int32_t *step_value, int32_t *default_value, k4a_color_control_mode_t *default_mode)</argsstring>
        <name>k4a_device_get_color_control_capabilities</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_gafba23de13b10b11e413485e421aa0468_1gafba23de13b10b11e413485e421aa0468" kindref="member">k4a_color_control_command_t</ref></type>
          <declname>command</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>supports_auto</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>min_value</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>max_value</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>step_value</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>default_value</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_ga3485402fc1bc5dc709e0d5859b6e8c88_1ga3485402fc1bc5dc709e0d5859b6e8c88" kindref="member">k4a_color_control_mode_t</ref> *</type>
          <declname>default_mode</declname>
        </param>
        <briefdescription>
<para>Get the Azure Kinect color sensor control capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>Color sensor control command.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>supports_auto</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store whether the color sensor&apos;s control support auto mode or not. true if it supports auto mode, otherwise false.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store the color sensor&apos;s control minimum value of /p command.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store the color sensor&apos;s control maximum value of /p command.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store the color sensor&apos;s control step value of /p command.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store the color sensor&apos;s control default value of /p command.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store the color sensor&apos;s control default mode of /p command.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if the value was successfully returned, <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if an error occurred. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1453" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1453" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga5cb97bc0db4ab28ad98c44e323da1cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_color_control</definition>
        <argsstring>(k4a_device_t device_handle, k4a_color_control_command_t command, k4a_color_control_mode_t *mode, int32_t *value)</argsstring>
        <name>k4a_device_get_color_control</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_gafba23de13b10b11e413485e421aa0468_1gafba23de13b10b11e413485e421aa0468" kindref="member">k4a_color_control_command_t</ref></type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_ga3485402fc1bc5dc709e0d5859b6e8c88_1ga3485402fc1bc5dc709e0d5859b6e8c88" kindref="member">k4a_color_control_mode_t</ref> *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get the Azure Kinect color sensor control value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>Color sensor control command.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store the color sensor&apos;s control mode. This mode represents whether the command is in automatic or manual mode.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store the color sensor&apos;s control value. This value is always written, but is only valid when the <computeroutput>mode</computeroutput> returned is <ref refid="group___enumerations_ga3485402fc1bc5dc709e0d5859b6e8c88_1gga3485402fc1bc5dc709e0d5859b6e8c88a094d94f9ec0640e085a7318c92205d1b" kindref="member">K4A_COLOR_CONTROL_MODE_MANUAL</ref> for the current <computeroutput>command</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if the value was successfully returned, <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if an error occurred. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>Each control command may be set to manual or automatic. See the definition of <ref refid="group___enumerations_gafba23de13b10b11e413485e421aa0468_1gafba23de13b10b11e413485e421aa0468" kindref="member">k4a_color_control_command_t</ref> on how to interpret the <computeroutput>value</computeroutput> for each command.</para>
</simplesect>
<simplesect kind="remark"><para>Some control commands are only supported in manual mode. When a command is in automatic mode, the <computeroutput>value</computeroutput> for that command is not valid.</para>
</simplesect>
<simplesect kind="remark"><para>Control values set on a device are reset only when the device is power cycled. The device will retain the settings even if the <ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref> is closed or the application is restarted.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1505" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1505" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gae81269489170b26b7f0bbe1a7f9d31d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_set_color_control</definition>
        <argsstring>(k4a_device_t device_handle, k4a_color_control_command_t command, k4a_color_control_mode_t mode, int32_t value)</argsstring>
        <name>k4a_device_set_color_control</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_gafba23de13b10b11e413485e421aa0468_1gafba23de13b10b11e413485e421aa0468" kindref="member">k4a_color_control_command_t</ref></type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_ga3485402fc1bc5dc709e0d5859b6e8c88_1ga3485402fc1bc5dc709e0d5859b6e8c88" kindref="member">k4a_color_control_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the Azure Kinect color sensor control value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>Color sensor control command.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Color sensor control mode to set. This mode represents whether the command is in automatic or manual mode.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set the color sensor&apos;s control to. The value is only valid if <computeroutput>mode</computeroutput> is set to <ref refid="group___enumerations_ga3485402fc1bc5dc709e0d5859b6e8c88_1gga3485402fc1bc5dc709e0d5859b6e8c88a094d94f9ec0640e085a7318c92205d1b" kindref="member">K4A_COLOR_CONTROL_MODE_MANUAL</ref>, and is otherwise ignored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if the value was successfully set, <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if an error occurred. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>Each control command may be set to manual or automatic. See the definition of <ref refid="group___enumerations_gafba23de13b10b11e413485e421aa0468_1gafba23de13b10b11e413485e421aa0468" kindref="member">k4a_color_control_command_t</ref> on how to interpret the <computeroutput>value</computeroutput> for each command.</para>
</simplesect>
<simplesect kind="remark"><para>Some control commands are only supported in manual mode. When a command is in automatic mode, the <computeroutput>value</computeroutput> for that command is not valid.</para>
</simplesect>
<simplesect kind="remark"><para>Control values set on a device are reset only when the device is power cycled. The device will retain the settings even if the <ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref> is closed or the application is restarted.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1551" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1551" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga8c4e46642cee3115aeb0b33e2b43b24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1ga71b3cf304a2cd8fbac2f86c876deda5c" kindref="member">k4a_buffer_result_t</ref></type>
        <definition>k4a_buffer_result_t k4a_device_get_raw_calibration</definition>
        <argsstring>(k4a_device_t device_handle, uint8_t *data, size_t *data_size)</argsstring>
        <name>k4a_device_get_raw_calibration</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Get the raw calibration blob for the entire Azure Kinect device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the calibration data to. This field may optionally be set to NULL for the caller to query for the needed data size.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>On passing <computeroutput>data_size</computeroutput> into the function this variable represents the available size of the <computeroutput>data</computeroutput> buffer. On return this variable is updated with the amount of data actually written to the buffer, or the size required to store the calibration buffer if <computeroutput>data</computeroutput> is NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1gga71b3cf304a2cd8fbac2f86c876deda5cab28733ec2d34368fbc91a2ee25545fc3" kindref="member">K4A_BUFFER_RESULT_SUCCEEDED</ref> if <computeroutput>data</computeroutput> was successfully written. If <computeroutput>data_size</computeroutput> points to a buffer size that is too small to hold the output or <computeroutput>data</computeroutput> is NULL, <ref refid="group___enumerations_ga71b3cf304a2cd8fbac2f86c876deda5c_1gga71b3cf304a2cd8fbac2f86c876deda5ca37df229f19ce567914a8b8d15fc50248" kindref="member">K4A_BUFFER_RESULT_TOO_SMALL</ref> is returned and <computeroutput>data_size</computeroutput> is updated to contain the minimum buffer size needed to capture the calibration data.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1585" column="22" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1585" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga2d9b1bea66eecbbf7b2d2868f913292b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_calibration</definition>
        <argsstring>(k4a_device_t device_handle, const uint32_t depth_mode_id, const uint32_t color_mode_id, k4a_calibration_t *calibration)</argsstring>
        <name>k4a_device_get_calibration</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>depth_mode_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>color_mode_id</declname>
        </param>
        <param>
          <type><ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <briefdescription>
<para>Get the camera calibration for the entire Azure Kinect device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_mode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode in which depth camera is operated.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_mode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode in which color camera is operated.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the calibration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>calibration</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="remark"><para>The <computeroutput>calibration</computeroutput> represents the data needed to transform between the camera views and may be different for each operating <computeroutput>depth_mode_id</computeroutput> and <computeroutput>color_mode_id</computeroutput> the device is configured to operate in.</para>
</simplesect>
<simplesect kind="remark"><para>The <computeroutput>calibration</computeroutput> output is used as input to all calibration and transformation functions.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" kindref="member">k4a_calibration_2d_to_2d()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_ga664602bdb48dab38117a6c1d14b880de_1ga664602bdb48dab38117a6c1d14b880de" kindref="member">k4a_calibration_2d_to_3d()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_ga2ed8b51d727425caa942aab190fc2ba9_1ga2ed8b51d727425caa942aab190fc2ba9" kindref="member">k4a_calibration_3d_to_2d()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" kindref="member">k4a_calibration_3d_to_3d()</ref></para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1628" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1628" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga0209ac87bfd055163677321b0304e962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_device_get_sync_jack</definition>
        <argsstring>(k4a_device_t device_handle, bool *sync_in_jack_connected, bool *sync_out_jack_connected)</argsstring>
        <name>k4a_device_get_sync_jack</name>
        <param>
          <type><ref refid="structk4a__device__t" kindref="compound">k4a_device_t</ref></type>
          <declname>device_handle</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>sync_in_jack_connected</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>sync_out_jack_connected</declname>
        </param>
        <briefdescription>
<para>Get the device jack status for the synchronization in and synchronization out connectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained by <ref refid="group___functions_ga3d4eb5dfbf4d576d4978b66ea419f113_1ga3d4eb5dfbf4d576d4978b66ea419f113" kindref="member">k4a_device_open()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync_in_jack_connected</parametername>
</parameternamelist>
<parameterdescription>
<para>Upon successful return this value will be set to true if a cable is connected to this sync in jack.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync_out_jack_connected</parametername>
</parameternamelist>
<parameterdescription>
<para>Upon successful return this value will be set to true if a cable is connected to this sync out jack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if the connector status was successfully read. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>sync_out_jack_connected</computeroutput> is true then <ref refid="structk4a__device__configuration__t" kindref="compound">k4a_device_configuration_t</ref> wired_sync_mode mode can be set to <ref refid="group___enumerations_ga6404c655dd8656efb745c6ee90da2505_1gga6404c655dd8656efb745c6ee90da2505ad5e3a4dcef58c6d591a7d73a3a02602c" kindref="member">K4A_WIRED_SYNC_MODE_STANDALONE</ref> or <ref refid="group___enumerations_ga6404c655dd8656efb745c6ee90da2505_1gga6404c655dd8656efb745c6ee90da2505a014b98f7b0c962a994abe1a472bf6697" kindref="member">K4A_WIRED_SYNC_MODE_MASTER</ref>. If <computeroutput>sync_in_jack_connected</computeroutput> is true then <ref refid="structk4a__device__configuration__t" kindref="compound">k4a_device_configuration_t</ref> wired_sync_mode mode can be set to <ref refid="group___enumerations_ga6404c655dd8656efb745c6ee90da2505_1gga6404c655dd8656efb745c6ee90da2505ad5e3a4dcef58c6d591a7d73a3a02602c" kindref="member">K4A_WIRED_SYNC_MODE_STANDALONE</ref> or <ref refid="group___enumerations_ga6404c655dd8656efb745c6ee90da2505_1gga6404c655dd8656efb745c6ee90da2505a8140f817b21902d275832a1ef6c216ca" kindref="member">K4A_WIRED_SYNC_MODE_SUBORDINATE</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_gaad7a85e1e5471810262442fc4a8e217a_1gaad7a85e1e5471810262442fc4a8e217a" kindref="member">k4a_device_start_cameras()</ref></para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1666" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1666" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga3efe518a3de8c75c174cb97c84e12735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_get_from_raw</definition>
        <argsstring>(char *raw_calibration, size_t raw_calibration_size, const uint32_t depth_mode_id, const uint32_t color_mode_id, k4a_calibration_t *calibration)</argsstring>
        <name>k4a_calibration_get_from_raw</name>
        <param>
          <type>char *</type>
          <declname>raw_calibration</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>raw_calibration_size</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>depth_mode_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>color_mode_id</declname>
        </param>
        <param>
          <type><ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <briefdescription>
<para>Get the camera calibration for a device from a raw calibration blob. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>raw_calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw calibration blob obtained from a device or recording. The raw calibration must be NULL terminated.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw_calibration_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of raw_calibration including the NULL termination.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_mode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode in which depth camera is operated.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_mode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Resolution in which color camera is operated.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to write the calibration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>calibration</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise.</para>
</simplesect>
<simplesect kind="remark"><para>The <computeroutput>calibration</computeroutput> represents the data needed to transform between the camera views and is different for each operating <computeroutput>depth_mode_id</computeroutput> and <computeroutput>color_mode_id</computeroutput> the device is configured to operate in.</para>
</simplesect>
<simplesect kind="remark"><para>The <computeroutput>calibration</computeroutput> output is used as input to all transformation functions.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" kindref="member">k4a_calibration_2d_to_2d()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_ga664602bdb48dab38117a6c1d14b880de_1ga664602bdb48dab38117a6c1d14b880de" kindref="member">k4a_calibration_2d_to_3d()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_ga2ed8b51d727425caa942aab190fc2ba9_1ga2ed8b51d727425caa942aab190fc2ba9" kindref="member">k4a_calibration_3d_to_2d()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" kindref="member">k4a_calibration_3d_to_3d()</ref></para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1712" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1712" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaacd1eab997ef964b5e436afa5295726e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_3d_to_3d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float3_t *source_point3d_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float3_t *target_point3d_mm)</argsstring>
        <name>k4a_calibration_3d_to_3d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>source_point3d_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>target_point3d_mm</declname>
        </param>
        <briefdescription>
<para>Transform a 3D point of a source coordinate system into a 3D point of the target coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 3D coordinates in millimeters representing a point in <computeroutput>source_camera</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output where the new 3D coordinates of the input point in the coordinate space of <computeroutput>target_camera</computeroutput> is stored in millimeters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point3d_mm</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function is used to transform 3D points between depth and color camera coordinate systems. The function uses the extrinsic camera calibration. It computes the output via multiplication with a precomputed matrix encoding a 3D rotation and a 3D translation. If <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> are the same, then <computeroutput>target_point3d_mm</computeroutput> will be identical to <computeroutput>source_point3d_mm</computeroutput>.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1756" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1756" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga664602bdb48dab38117a6c1d14b880de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_2d_to_3d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float2_t *source_point2d, const float source_depth_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float3_t *target_point3d_mm, int *valid)</argsstring>
        <name>k4a_calibration_2d_to_3d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>source_point2d</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>source_depth_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>target_point3d_mm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 2D pixel coordinate with an associated depth value of the source camera into a 3D point of the target coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>source_camera</computeroutput> coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_depth_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of <computeroutput>source_point2d</computeroutput> in millimeters. One way to derive the depth value in the color camera geometry is to use the function <ref refid="group___functions_gafacffb5f781a9c2df30d4a16241cd514_1gafacffb5f781a9c2df30d4a16241cd514" kindref="member">k4a_transformation_depth_image_to_color_camera()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output where the 3D coordinates of the input pixel in the coordinate system of <computeroutput>target_camera</computeroutput> is stored in millimeters.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point2d</computeroutput> is a valid coordinate, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point3d_mm</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point3d_mm</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function applies the intrinsic calibration of <computeroutput>source_camera</computeroutput> to compute the 3D ray from the focal point of the camera through pixel <computeroutput>source_point2d</computeroutput>. The 3D point on this ray is then found using <computeroutput>source_depth_mm</computeroutput>. If <computeroutput>target_camera</computeroutput> is different from <computeroutput>source_camera</computeroutput>, the 3D point is transformed to <computeroutput>target_camera</computeroutput> using <ref refid="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" kindref="member">k4a_calibration_3d_to_3d()</ref>. In practice, <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> will often be identical. In this case, no 3D to 3D transformation is applied.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point2d</computeroutput> is not considered as valid pixel coordinate according to the intrinsic camera model, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point3d_mm</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1817" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1817" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga2ed8b51d727425caa942aab190fc2ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_3d_to_2d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float3_t *source_point3d_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float2_t *target_point2d, int *valid)</argsstring>
        <name>k4a_calibration_3d_to_2d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float3__t" kindref="compound">k4a_float3_t</ref> *</type>
          <declname>source_point3d_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>target_point2d</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 3D point of a source coordinate system into a 2D pixel coordinate of the target camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point3d_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 3D coordinates in millimeters representing a point in <computeroutput>source_camera</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output where the 2D pixel in <computeroutput>target_camera</computeroutput> coordinates is stored.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point3d_mm</computeroutput> is a valid coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point2d</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point2d</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>target_camera</computeroutput> is different from <computeroutput>source_camera</computeroutput>, <computeroutput>source_point3d_mm</computeroutput> is transformed to <computeroutput>target_camera</computeroutput> using <ref refid="group___functions_gaacd1eab997ef964b5e436afa5295726e_1gaacd1eab997ef964b5e436afa5295726e" kindref="member">k4a_calibration_3d_to_3d()</ref>. In practice, <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> will often be identical. In this case, no 3D to 3D transformation is applied. The 3D point in the coordinate system of <computeroutput>target_camera</computeroutput> is then projected onto the image plane using the intrinsic calibration of <computeroutput>target_camera</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point3d_mm</computeroutput> does not map to a valid 2D coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point2d</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1873" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1873" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga3b6bf6dedbfe67468e2f895dcce68ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_2d_to_2d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float2_t *source_point2d, const float source_depth_mm, const k4a_calibration_type_t source_camera, const k4a_calibration_type_t target_camera, k4a_float2_t *target_point2d, int *valid)</argsstring>
        <name>k4a_calibration_2d_to_2d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>source_point2d</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>source_depth_mm</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>source_camera</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>target_camera</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>target_point2d</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 2D pixel coordinate with an associated depth value of the source camera into a 2D pixel coordinate of the target camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>source_camera</computeroutput> coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_depth_mm</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of <computeroutput>source_point2d</computeroutput> in millimeters. One way to derive the depth value in the color camera geometry is to use the function <ref refid="group___functions_gafacffb5f781a9c2df30d4a16241cd514_1gafacffb5f781a9c2df30d4a16241cd514" kindref="member">k4a_transformation_depth_image_to_color_camera()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The current camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The target camera.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>target_camera</computeroutput> coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point2d</computeroutput> is a valid coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point2d</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point2d</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function maps a pixel between the coordinate systems of the depth and color cameras. It is equivalent to calling <ref refid="group___functions_ga664602bdb48dab38117a6c1d14b880de_1ga664602bdb48dab38117a6c1d14b880de" kindref="member">k4a_calibration_2d_to_3d()</ref> to compute the 3D point corresponding to <computeroutput>source_point2d</computeroutput> and then using <ref refid="group___functions_ga2ed8b51d727425caa942aab190fc2ba9_1ga2ed8b51d727425caa942aab190fc2ba9" kindref="member">k4a_calibration_3d_to_2d()</ref> to map the 3D point into the coordinate system of the <computeroutput>target_camera</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_camera</computeroutput> and <computeroutput>target_camera</computeroutput> are identical, the function immediately sets <computeroutput>target_point2d</computeroutput> to <computeroutput>source_point2d</computeroutput> and returns without computing any transformations.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point2d</computeroutput> does not map to a valid 2D coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point2d</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1936" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1936" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga18bc3138d6cc68af6c49902853fda9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_calibration_color_2d_to_depth_2d</definition>
        <argsstring>(const k4a_calibration_t *calibration, const k4a_float2_t *source_point2d, const k4a_image_t depth_image, k4a_float2_t *target_point2d, int *valid)</argsstring>
        <name>k4a_calibration_color_2d_to_depth_2d</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>const <ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>source_point2d</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>depth_image</declname>
        </param>
        <param>
          <type><ref refid="unionk4a__float2__t" kindref="compound">k4a_float2_t</ref> *</type>
          <declname>target_point2d</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
<para>Transform a 2D pixel coordinate from color camera into a 2D pixel coordinate of the depth camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to read the camera calibration obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>color</computeroutput> camera coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input depth image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_point2d</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D pixel in <computeroutput>depth</computeroutput> camera coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output parameter returns a value of 1 if the <computeroutput>source_point2d</computeroutput> is a valid coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, and will return 0 if the coordinate is not valid in the calibration model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>target_point2d</computeroutput> was successfully written. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> if <computeroutput>calibration</computeroutput> contained invalid transformation parameters. If the function returns <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref>, but <computeroutput>valid</computeroutput> is 0, the transformation was computed, but the results in <computeroutput>target_point2d</computeroutput> are outside of the range of valid calibration and should be ignored. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
<simplesect kind="remark"><para>This function represents an alternative to <ref refid="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" kindref="member">k4a_calibration_2d_to_2d()</ref> if the number of pixels that need to be transformed is small. This function searches along an epipolar line in the depth image to find the corresponding depth pixel. If a larger number of pixels need to be transformed, it might be computationally cheaper to call <ref refid="group___functions_gafacffb5f781a9c2df30d4a16241cd514_1gafacffb5f781a9c2df30d4a16241cd514" kindref="member">k4a_transformation_depth_image_to_color_camera()</ref> to get correspondence depth values for these color pixels, then call the function <ref refid="group___functions_ga3b6bf6dedbfe67468e2f895dcce68ed4_1ga3b6bf6dedbfe67468e2f895dcce68ed4" kindref="member">k4a_calibration_2d_to_2d()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>If <computeroutput>source_point2d</computeroutput> does not map to a valid 2D coordinate in the <computeroutput>target_camera</computeroutput> coordinate system, <computeroutput>valid</computeroutput> is set to 0. If it is valid, <computeroutput>valid</computeroutput> will be set to 1. The user should not use the value of <computeroutput>target_point2d</computeroutput> if <computeroutput>valid</computeroutput> was set to 0.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="1991" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="1991" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga853a1a5b6d521bbdf523a69e890c4f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structk4a__transformation__t" kindref="compound">k4a_transformation_t</ref></type>
        <definition>k4a_transformation_t k4a_transformation_create</definition>
        <argsstring>(const k4a_calibration_t *calibration)</argsstring>
        <name>k4a_transformation_create</name>
        <param>
          <type>const <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> *</type>
          <declname>calibration</declname>
        </param>
        <briefdescription>
<para>Get handle to transformation handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>A calibration structure obtained by <ref refid="group___functions_ga2d9b1bea66eecbbf7b2d2868f913292b_1ga2d9b1bea66eecbbf7b2d2868f913292b" kindref="member">k4a_device_get_calibration()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A transformation handle. A NULL is returned if creation fails.</para>
</simplesect>
<simplesect kind="remark"><para>The transformation handle is used to transform images from the coordinate system of one camera into the other. Each transformation handle requires some pre-computed resources to be allocated, which are retained until the handle is destroyed.</para>
</simplesect>
<simplesect kind="remark"><para>The transformation handle must be destroyed with <ref refid="group___functions_ga7d3ecaae66f26c1a89da9042b1bc6d44_1ga7d3ecaae66f26c1a89da9042b1bc6d44" kindref="member">k4a_transformation_destroy()</ref> when it is no longer to be used.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2023" column="23" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2023" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga7d3ecaae66f26c1a89da9042b1bc6d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k4a_transformation_destroy</definition>
        <argsstring>(k4a_transformation_t transformation_handle)</argsstring>
        <name>k4a_transformation_destroy</name>
        <param>
          <type><ref refid="structk4a__transformation__t" kindref="compound">k4a_transformation_t</ref></type>
          <declname>transformation_handle</declname>
        </param>
        <briefdescription>
<para>Destroy transformation handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation handle to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2040" column="7" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2040" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gafacffb5f781a9c2df30d4a16241cd514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_transformation_depth_image_to_color_camera</definition>
        <argsstring>(k4a_transformation_t transformation_handle, const k4a_image_t depth_image, k4a_image_t transformed_depth_image)</argsstring>
        <name>k4a_transformation_depth_image_to_color_camera</name>
        <param>
          <type><ref refid="structk4a__transformation__t" kindref="compound">k4a_transformation_t</ref></type>
          <declname>transformation_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>depth_image</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>transformed_depth_image</declname>
        </param>
        <briefdescription>
<para>Transforms the depth map into the geometry of the color camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation handle.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input depth image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformed_depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to output transformed depth image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This produces a depth image for which each pixel matches the corresponding pixel coordinates of the color camera.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>depth_image</computeroutput> and <computeroutput>transformed_depth_image</computeroutput> must be of format <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba5abd5fdff69181007ec79ed3087aa18e" kindref="member">K4A_IMAGE_FORMAT_DEPTH16</ref>.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>transformed_depth_image</computeroutput> must have a width and height matching the width and height of the color camera in the mode specified by the <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> used to create the <computeroutput>transformation_handle</computeroutput> with <ref refid="group___functions_ga853a1a5b6d521bbdf523a69e890c4f10_1ga853a1a5b6d521bbdf523a69e890c4f10" kindref="member">k4a_transformation_create()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>The contents <computeroutput>transformed_depth_image</computeroutput> will be filled with the depth values derived from <computeroutput>depth_image</computeroutput> in the color camera&apos;s coordinate space.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>transformed_depth_image</computeroutput> should be created by the caller using <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref>.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>transformed_depth_image</computeroutput> was successfully written and <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2085" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2085" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gac00dd00e7612a86382e3d0a130f276bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_transformation_depth_image_to_color_camera_custom</definition>
        <argsstring>(k4a_transformation_t transformation_handle, const k4a_image_t depth_image, const k4a_image_t custom_image, k4a_image_t transformed_depth_image, k4a_image_t transformed_custom_image, k4a_transformation_interpolation_type_t interpolation_type, uint32_t invalid_custom_value)</argsstring>
        <name>k4a_transformation_depth_image_to_color_camera_custom</name>
        <param>
          <type><ref refid="structk4a__transformation__t" kindref="compound">k4a_transformation_t</ref></type>
          <declname>transformation_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>depth_image</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>custom_image</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>transformed_depth_image</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>transformed_custom_image</declname>
        </param>
        <param>
          <type><ref refid="group___enumerations_ga06f55e23e1d260b069e89e4a9cd6f4ee_1ga06f55e23e1d260b069e89e4a9cd6f4ee" kindref="member">k4a_transformation_interpolation_type_t</ref></type>
          <declname>interpolation_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>invalid_custom_value</declname>
        </param>
        <briefdescription>
<para>Transforms depth map and a custom image into the geometry of the color camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation handle.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input depth image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>custom_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input custom image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformed_depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to output transformed depth image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformed_custom_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to output transformed custom image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolation_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter that controls how pixels in <computeroutput>custom_image</computeroutput> should be interpolated when transformed to color camera space. K4A_TRANSFORMATION_INTERPOLATION_TYPE_LINEAR if linear interpolation should be used. K4A_TRANSFORMATION_INTERPOLATION_TYPE_NEAREST if nearest neighbor interpolation should be used.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_custom_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the custom image pixel value that should be written to <computeroutput>transformed_custom_image</computeroutput> in case the corresponding depth pixel can not be transformed into the color camera space.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This produces a depth image and a corresponding custom image for which each pixel matches the corresponding pixel coordinates of the color camera.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>depth_image</computeroutput> and <computeroutput>transformed_depth_image</computeroutput> must be of format <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba5abd5fdff69181007ec79ed3087aa18e" kindref="member">K4A_IMAGE_FORMAT_DEPTH16</ref>.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>custom_image</computeroutput> and <computeroutput>transformed_custom_image</computeroutput> must be of format <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba17dea221ecdfa136dea68f80e0397e15" kindref="member">K4A_IMAGE_FORMAT_CUSTOM8</ref> or <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba6f2ee5c37729f9196b0cf3d3028edc42" kindref="member">K4A_IMAGE_FORMAT_CUSTOM16</ref>.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>transformed_depth_image</computeroutput> and <computeroutput>transformed_custom_image</computeroutput> must have a width and height matching the width and height of the color camera in the mode specified by the <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> used to create the <computeroutput>transformation_handle</computeroutput> with <ref refid="group___functions_ga853a1a5b6d521bbdf523a69e890c4f10_1ga853a1a5b6d521bbdf523a69e890c4f10" kindref="member">k4a_transformation_create()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>custom_image</computeroutput> must have a width and height matching the width and height of <computeroutput>depth_image</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>The contents <computeroutput>transformed_depth_image</computeroutput> will be filled with the depth values derived from <computeroutput>depth_image</computeroutput> in the color camera&apos;s coordinate space.</para>
</simplesect>
<simplesect kind="remark"><para>The contents <computeroutput>transformed_custom_image</computeroutput> will be filled with the values derived from <computeroutput>custom_image</computeroutput> in the color camera&apos;s coordinate space.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>transformed_depth_image</computeroutput> and <computeroutput>transformed_custom_image</computeroutput> should be created by the caller using <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>Using <ref refid="group___enumerations_ga06f55e23e1d260b069e89e4a9cd6f4ee_1gga06f55e23e1d260b069e89e4a9cd6f4eeac91cb5f01c87411e2980d109a7a36e56" kindref="member">K4A_TRANSFORMATION_INTERPOLATION_TYPE_LINEAR</ref> for <computeroutput>interpolation_type</computeroutput> could create new values to <computeroutput>transformed_custom_image</computeroutput> which do no exist in <computeroutput>custom_image</computeroutput>. Using <ref refid="group___enumerations_ga06f55e23e1d260b069e89e4a9cd6f4ee_1gga06f55e23e1d260b069e89e4a9cd6f4eea9b7517e41898a208566db614bcf26cc5" kindref="member">K4A_TRANSFORMATION_INTERPOLATION_TYPE_NEAREST</ref> will prevent this from happenning but will result in a less smooth image.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>transformed_depth_image</computeroutput> and <computeroutput>transformed_custom_image</computeroutput> were successfully written and <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2166" column="1" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1gaf3a941f07bb0185cd7a72699a648fc29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_transformation_color_image_to_depth_camera</definition>
        <argsstring>(k4a_transformation_t transformation_handle, const k4a_image_t depth_image, const k4a_image_t color_image, k4a_image_t transformed_color_image)</argsstring>
        <name>k4a_transformation_color_image_to_depth_camera</name>
        <param>
          <type><ref refid="structk4a__transformation__t" kindref="compound">k4a_transformation_t</ref></type>
          <declname>transformation_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>depth_image</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>color_image</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>transformed_color_image</declname>
        </param>
        <briefdescription>
<para>Transforms a color image into the geometry of the depth camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation handle.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input depth image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input color image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformed_color_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to output transformed color image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This produces a color image for which each pixel matches the corresponding pixel coordinates of the depth camera.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>depth_image</computeroutput> and <computeroutput>color_image</computeroutput> need to represent the same moment in time. The depth data will be applied to the color image to properly warp the color data to the perspective of the depth camera.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>depth_image</computeroutput> must be of type <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba5abd5fdff69181007ec79ed3087aa18e" kindref="member">K4A_IMAGE_FORMAT_DEPTH16</ref>. <computeroutput>color_image</computeroutput> must be of format <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddbade43f3d12f5ce476be5be2b0e289d481" kindref="member">K4A_IMAGE_FORMAT_COLOR_BGRA32</ref>.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>transformed_color_image</computeroutput> image must be of format <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddbade43f3d12f5ce476be5be2b0e289d481" kindref="member">K4A_IMAGE_FORMAT_COLOR_BGRA32</ref>. <computeroutput>transformed_color_image</computeroutput> must have the width and height of the depth camera in the mode specified by the <ref refid="structk4a__calibration__t" kindref="compound">k4a_calibration_t</ref> used to create the <computeroutput>transformation_handle</computeroutput> with <ref refid="group___functions_ga853a1a5b6d521bbdf523a69e890c4f10_1ga853a1a5b6d521bbdf523a69e890c4f10" kindref="member">k4a_transformation_create()</ref>.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>transformed_color_image</computeroutput> should be created by the caller using <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref>.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>transformed_color_image</computeroutput> was successfully written and <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2222" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2222" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___functions_1ga7385eb4beb9d8892e8a88cf4feb3be70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1ga4b419a99aa2220b076a4520dc2afd1e5" kindref="member">k4a_result_t</ref></type>
        <definition>k4a_result_t k4a_transformation_depth_image_to_point_cloud</definition>
        <argsstring>(k4a_transformation_t transformation_handle, const k4a_image_t depth_image, const k4a_calibration_type_t camera, k4a_image_t xyz_image)</argsstring>
        <name>k4a_transformation_depth_image_to_point_cloud</name>
        <param>
          <type><ref refid="structk4a__transformation__t" kindref="compound">k4a_transformation_t</ref></type>
          <declname>transformation_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>depth_image</declname>
        </param>
        <param>
          <type>const <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1ga8d5fae13125f360be86c166684cdb5c5" kindref="member">k4a_calibration_type_t</ref></type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="structk4a__image__t" kindref="compound">k4a_image_t</ref></type>
          <declname>xyz_image</declname>
        </param>
        <briefdescription>
<para>Transforms the depth image into 3 planar images representing X, Y and Z-coordinates of corresponding 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation handle.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to input depth image.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>Geometry in which depth map was computed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xyz_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to output xyz image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><computeroutput>depth_image</computeroutput> must be of format <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba5abd5fdff69181007ec79ed3087aa18e" kindref="member">K4A_IMAGE_FORMAT_DEPTH16</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>The <computeroutput>camera</computeroutput> parameter tells the function what the perspective of the <computeroutput>depth_image</computeroutput> is. If the <computeroutput>depth_image</computeroutput> was captured directly from the depth camera, the value should be <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1gga8d5fae13125f360be86c166684cdb5c5a5e8e2174902ceeeb16c4dc54914fcc66" kindref="member">K4A_CALIBRATION_TYPE_DEPTH</ref>. If the <computeroutput>depth_image</computeroutput> is the result of a transformation into the color camera&apos;s coordinate space using <ref refid="group___functions_gafacffb5f781a9c2df30d4a16241cd514_1gafacffb5f781a9c2df30d4a16241cd514" kindref="member">k4a_transformation_depth_image_to_color_camera()</ref>, the value should be <ref refid="group___enumerations_ga8d5fae13125f360be86c166684cdb5c5_1gga8d5fae13125f360be86c166684cdb5c5a5e5062625d7c0ba242b078daf0b526c3" kindref="member">K4A_CALIBRATION_TYPE_COLOR</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>The format of <computeroutput>xyz_image</computeroutput> must be <ref refid="group___enumerations_gabd9688eb20d5cb878fd22d36de882ddb_1ggabd9688eb20d5cb878fd22d36de882ddba10833e30171730f43eeff1dc8d7b0a52" kindref="member">K4A_IMAGE_FORMAT_CUSTOM</ref>. The width and height of <computeroutput>xyz_image</computeroutput> must match the width and height of <computeroutput>depth_image</computeroutput>. <computeroutput>xyz_image</computeroutput> must have a stride in bytes of at least 6 times its width in pixels.</para>
</simplesect>
<simplesect kind="remark"><para>Each pixel of the <computeroutput>xyz_image</computeroutput> consists of three int16_t values, totaling 6 bytes. The three int16_t values are the X, Y, and Z values of the point.</para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>xyz_image</computeroutput> should be created by the caller using <ref refid="group___functions_ga859554581bb97a620ff8e92a893e71ef_1ga859554581bb97a620ff8e92a893e71ef" kindref="member">k4a_image_create()</ref> or <ref refid="group___functions_gaf84f2a271bcf6afae429bbccd47071b3_1gaf84f2a271bcf6afae429bbccd47071b3" kindref="member">k4a_image_create_from_buffer()</ref>.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a66d48bea75b8ddf1c568a824469da9d3" kindref="member">K4A_RESULT_SUCCEEDED</ref> if <computeroutput>xyz_image</computeroutput> was successfully written and <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5aeddb129210ca398349f6b7323f1cfbed" kindref="member">K4A_RESULT_FAILED</ref> otherwise. <ref refid="group___enumerations_ga4b419a99aa2220b076a4520dc2afd1e5_1gga4b419a99aa2220b076a4520dc2afd1e5a7fdd637f1645c2d8ffeb9f5dfa028a13" kindref="member">K4A_RESULT_UNSUPPORTED</ref> if the device does not support this operation.</para>
</simplesect>
 
<requirements>
  <requirement name="Header">k4a.h (include k4a/k4a.h)</requirement>
  <requirement name="Library">k4a.lib</requirement>
  <requirement name="DLL">k4a.dll</requirement>
</requirements>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" line="2275" column="15" declfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.h" declline="2275" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public functions of the API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
