<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classk4a_1_1capture" kind="class" language="C++" prot="public">
    <compoundname>k4a::capture</compoundname>
    <includes refid="k4a_8hpp" local="no">k4a/k4a.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classk4a_1_1capture_1aecd3b5612cb9f649b90ba94f48aed434" prot="private" static="no" mutable="no">
        <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
        <definition>k4a_capture_t k4a::capture::m_handle</definition>
        <argsstring></argsstring>
        <name>m_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="637" column="19" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="637" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classk4a_1_1capture_a713dcb3e3539e8d08f30be67b23b6ea8_1a713dcb3e3539e8d08f30be67b23b6ea8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>k4a::capture::capture</definition>
        <argsstring>(k4a_capture_t handle=nullptr) noexcept</argsstring>
        <name>capture</name>
        <param>
          <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
          <declname>handle</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Creates a capture from a <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> Takes ownership of the handle, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>assuming that handle has a refcount of 1, you should not call k4a_capture_release on the handle after giving it to the capture; the capture will take care of that. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="422" column="5" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="422" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1a6da3c95c4331e4c25a8379f8e1feb97e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>k4a::capture::capture</definition>
        <argsstring>(const capture &amp;other) noexcept</argsstring>
        <name>capture</name>
        <param>
          <type>const <ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a shallow copy of another capture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="426" column="5" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="426" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1aa06ed4ed8711325935e906a0414c1009" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>k4a::capture::capture</definition>
        <argsstring>(capture &amp;&amp;other) noexcept</argsstring>
        <name>capture</name>
        <param>
          <type><ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Moves another capture into a new capture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="436" column="5" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1ac7fb8fe0e20dfb9f26bf4df813bde6fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>k4a::capture::~capture</definition>
        <argsstring>()</argsstring>
        <name>~capture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="441" column="5" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1acda82ae99269039a2671ec29c7f7fa55" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;</type>
        <definition>capture&amp; k4a::capture::operator=</definition>
        <argsstring>(const capture &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Sets capture to a shallow copy of the other image. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="448" column="13" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="448" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1ad297433d44328b7b2a60a90bd2f80268" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;</type>
        <definition>capture&amp; k4a::capture::operator=</definition>
        <argsstring>(capture &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Moves another capture into this capture; other is set to invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="464" column="13" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="464" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1a766690e9c9f045b552892971903bf578" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;</type>
        <definition>capture&amp; k4a::capture::operator=</definition>
        <argsstring>(std::nullptr_t) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
<para>Invalidates this capture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="477" column="13" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="477" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1aa25047bfa3d41a3e350b93dbead41b58" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool k4a::capture::operator==</definition>
        <argsstring>(const capture &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns true if two captures refer to the same <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="485" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="485" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1a650a8677ba836694aac75a22683f3d9d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool k4a::capture::operator==</definition>
        <argsstring>(std::nullptr_t) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
<para>Returns false if the capture is valid, true otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="492" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1a34e5cc8621b5c782f79e8ad7a6d667b1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool k4a::capture::operator!=</definition>
        <argsstring>(const capture &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classk4a_1_1capture" kindref="compound">capture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns true if two captures wrap different <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> instances, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="499" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1a1a5b1eac81bfd22a978f5c2ccbfc38a4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool k4a::capture::operator!=</definition>
        <argsstring>(std::nullptr_t) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
<para>Returns true if the capture is valid, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="506" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="506" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1a9b195bd62ed46c3138b88942ca8b6447" prot="public" static="no" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>k4a::capture::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Returns true if the capture is valid, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="513" column="14" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="513" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1ab35642daed5d6d74f44b69806665573e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool k4a::capture::is_valid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>Returns true if the capture is valid, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="520" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="520" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_a5e5a361b96542cc0206524b03ddaf95d_1a5e5a361b96542cc0206524b03ddaf95d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref></type>
        <definition>k4a_capture_t k4a::capture::handle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>handle</name>
        <briefdescription>
<para>Returns the underlying <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> handle. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function does not increment the reference count on the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref>. The caller is responsible for incrementing the reference count on the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> if the caller needs the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> to outlive this C++ object. Otherwise, the <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref> will be destroyed by this C++ object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="532" column="19" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_1aa922aa6bae17310b4d73464a2486be92" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void k4a::capture::reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Releases the underlying <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref>; the capture is set to invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="539" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="539" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_a885c87e3fdd40c567350bfece9c6969c_1a885c87e3fdd40c567350bfece9c6969c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classk4a_1_1image" kindref="compound">image</ref></type>
        <definition>image k4a::capture::get_color_image</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_color_image</name>
        <briefdescription>
<para>Get the color image associated with the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_ga683e440b5f22215a2de58d7fa140488c_1ga683e440b5f22215a2de58d7fa140488c" kindref="member">k4a_capture_get_color_image</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="552" column="11" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_a36de50df5f36391e7ed606c0cb5607a2_1a36de50df5f36391e7ed606c0cb5607a2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classk4a_1_1image" kindref="compound">image</ref></type>
        <definition>image k4a::capture::get_depth_image</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_depth_image</name>
        <briefdescription>
<para>Get the depth image associated with the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_gafa03513da96bf6b8c254fc11a04ee6d6_1gafa03513da96bf6b8c254fc11a04ee6d6" kindref="member">k4a_capture_get_depth_image</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="561" column="11" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="561" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_aa19b3af5fefbb2dc4dabd4a31c94d6fc_1aa19b3af5fefbb2dc4dabd4a31c94d6fc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classk4a_1_1image" kindref="compound">image</ref></type>
        <definition>image k4a::capture::get_ir_image</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_ir_image</name>
        <briefdescription>
<para>Get the IR image associated with the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_ga1531c3fa76a7c174b8f2eab24de91794_1ga1531c3fa76a7c174b8f2eab24de91794" kindref="member">k4a_capture_get_ir_image</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="570" column="11" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_ac97e202cb82abcbd95cf584045233d64_1ac97e202cb82abcbd95cf584045233d64" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void k4a::capture::set_color_image</definition>
        <argsstring>(const image &amp;color_image) noexcept</argsstring>
        <name>set_color_image</name>
        <param>
          <type>const <ref refid="classk4a_1_1image" kindref="compound">image</ref> &amp;</type>
          <declname>color_image</declname>
        </param>
        <briefdescription>
<para>Set / add a color image to the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_ga28824350a175d8eeba7c7a7d2753c2cf_1ga28824350a175d8eeba7c7a7d2753c2cf" kindref="member">k4a_capture_set_color_image</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="579" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_a6136c6d7369ebccbee2a65ef4d800f9e_1a6136c6d7369ebccbee2a65ef4d800f9e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void k4a::capture::set_depth_image</definition>
        <argsstring>(const image &amp;depth_image) noexcept</argsstring>
        <name>set_depth_image</name>
        <param>
          <type>const <ref refid="classk4a_1_1image" kindref="compound">image</ref> &amp;</type>
          <declname>depth_image</declname>
        </param>
        <briefdescription>
<para>Set / add a depth image to the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_gad28b520b45096dd430d2a14b6052ebae_1gad28b520b45096dd430d2a14b6052ebae" kindref="member">k4a_capture_set_depth_image</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="588" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="588" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_aba19a0d0ff58f841223832422415c790_1aba19a0d0ff58f841223832422415c790" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void k4a::capture::set_ir_image</definition>
        <argsstring>(const image &amp;ir_image) noexcept</argsstring>
        <name>set_ir_image</name>
        <param>
          <type>const <ref refid="classk4a_1_1image" kindref="compound">image</ref> &amp;</type>
          <declname>ir_image</declname>
        </param>
        <briefdescription>
<para>Set / add an IR image to the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_ga473abb7de733bf5f53329f3b1a86594c_1ga473abb7de733bf5f53329f3b1a86594c" kindref="member">k4a_capture_set_ir_image</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="597" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_a462b292bdb1f7a525e461bc8a7d94510_1a462b292bdb1f7a525e461bc8a7d94510" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void k4a::capture::set_temperature_c</definition>
        <argsstring>(float temperature_c) noexcept</argsstring>
        <name>set_temperature_c</name>
        <param>
          <type>float</type>
          <declname>temperature_c</declname>
        </param>
        <briefdescription>
<para>Set the temperature associated with the capture in Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_ga262b1df45e7b33dd4ea95e81d52a3a9c_1ga262b1df45e7b33dd4ea95e81d52a3a9c" kindref="member">k4a_capture_set_temperature_c</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="606" column="10" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classk4a_1_1capture_a48bbcd6a4e69cf1c5574162d2d0f0d33_1a48bbcd6a4e69cf1c5574162d2d0f0d33" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float k4a::capture::get_temperature_c</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_temperature_c</name>
        <briefdescription>
<para>Get temperature (in Celsius) associated with the capture. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___functions_gacc45836ed4a9cd055c37f51ffca4f992_1gacc45836ed4a9cd055c37f51ffca4f992" kindref="member">k4a_capture_get_temperature_c</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="615" column="11" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="615" bodyend="618"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classk4a_1_1capture_a92b8f943cef424490692fc6e76bfe3ec_1a92b8f943cef424490692fc6e76bfe3ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classk4a_1_1capture" kindref="compound">capture</ref></type>
        <definition>static capture k4a::capture::create</definition>
        <argsstring>()</argsstring>
        <name>create</name>
        <briefdescription>
<para>Create an empty capture object. </para>
        </briefdescription>
        <detaileddescription>
<para>Throws error on failure.</para>
<para><simplesect kind="see"><para><ref refid="group___functions_gaffbf32b4d014c31826d52de1c0c932cc_1gaffbf32b4d014c31826d52de1c0c932cc" kindref="member">k4a_capture_create</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="625" column="20" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="625" bodyend="634"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper for <ref refid="structk4a__capture__t" kindref="compound">k4a_capture_t</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Wraps a handle for a capture. Copying/moving is cheap, copies are shallow. </para>
    </detaileddescription>
    <location file="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" line="414" column="1" bodyfile="D:/Neal Analytics/Microsoft/Azure-Kinect-Sensor-SDK/include/k4a/k4a.hpp" bodystart="415" bodyend="638"/>
    <listofallmembers>
      <member refid="classk4a_1_1capture_a713dcb3e3539e8d08f30be67b23b6ea8_1a713dcb3e3539e8d08f30be67b23b6ea8" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>capture</name></member>
      <member refid="classk4a_1_1capture_1a6da3c95c4331e4c25a8379f8e1feb97e" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>capture</name></member>
      <member refid="classk4a_1_1capture_1aa06ed4ed8711325935e906a0414c1009" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>capture</name></member>
      <member refid="classk4a_1_1capture_a92b8f943cef424490692fc6e76bfe3ec_1a92b8f943cef424490692fc6e76bfe3ec" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>create</name></member>
      <member refid="classk4a_1_1capture_a885c87e3fdd40c567350bfece9c6969c_1a885c87e3fdd40c567350bfece9c6969c" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>get_color_image</name></member>
      <member refid="classk4a_1_1capture_a36de50df5f36391e7ed606c0cb5607a2_1a36de50df5f36391e7ed606c0cb5607a2" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>get_depth_image</name></member>
      <member refid="classk4a_1_1capture_aa19b3af5fefbb2dc4dabd4a31c94d6fc_1aa19b3af5fefbb2dc4dabd4a31c94d6fc" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>get_ir_image</name></member>
      <member refid="classk4a_1_1capture_a48bbcd6a4e69cf1c5574162d2d0f0d33_1a48bbcd6a4e69cf1c5574162d2d0f0d33" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>get_temperature_c</name></member>
      <member refid="classk4a_1_1capture_a5e5a361b96542cc0206524b03ddaf95d_1a5e5a361b96542cc0206524b03ddaf95d" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>handle</name></member>
      <member refid="classk4a_1_1capture_1ab35642daed5d6d74f44b69806665573e" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>is_valid</name></member>
      <member refid="classk4a_1_1capture_1aecd3b5612cb9f649b90ba94f48aed434" prot="private" virt="non-virtual"><scope>k4a::capture</scope><name>m_handle</name></member>
      <member refid="classk4a_1_1capture_1a9b195bd62ed46c3138b88942ca8b6447" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator bool</name></member>
      <member refid="classk4a_1_1capture_1a34e5cc8621b5c782f79e8ad7a6d667b1" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator!=</name></member>
      <member refid="classk4a_1_1capture_1a1a5b1eac81bfd22a978f5c2ccbfc38a4" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator!=</name></member>
      <member refid="classk4a_1_1capture_1acda82ae99269039a2671ec29c7f7fa55" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator=</name></member>
      <member refid="classk4a_1_1capture_1ad297433d44328b7b2a60a90bd2f80268" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator=</name></member>
      <member refid="classk4a_1_1capture_1a766690e9c9f045b552892971903bf578" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator=</name></member>
      <member refid="classk4a_1_1capture_1aa25047bfa3d41a3e350b93dbead41b58" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator==</name></member>
      <member refid="classk4a_1_1capture_1a650a8677ba836694aac75a22683f3d9d" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>operator==</name></member>
      <member refid="classk4a_1_1capture_1aa922aa6bae17310b4d73464a2486be92" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>reset</name></member>
      <member refid="classk4a_1_1capture_ac97e202cb82abcbd95cf584045233d64_1ac97e202cb82abcbd95cf584045233d64" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>set_color_image</name></member>
      <member refid="classk4a_1_1capture_a6136c6d7369ebccbee2a65ef4d800f9e_1a6136c6d7369ebccbee2a65ef4d800f9e" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>set_depth_image</name></member>
      <member refid="classk4a_1_1capture_aba19a0d0ff58f841223832422415c790_1aba19a0d0ff58f841223832422415c790" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>set_ir_image</name></member>
      <member refid="classk4a_1_1capture_a462b292bdb1f7a525e461bc8a7d94510_1a462b292bdb1f7a525e461bc8a7d94510" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>set_temperature_c</name></member>
      <member refid="classk4a_1_1capture_1ac7fb8fe0e20dfb9f26bf4df813bde6fa" prot="public" virt="non-virtual"><scope>k4a::capture</scope><name>~capture</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
